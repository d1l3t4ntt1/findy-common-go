// Copyright 2020 Harri @ OP Techlab.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: agent.proto

// Package agency.v1 is the first version of findy gRPC API. As long as we'll
// not have changes that aren't backward compatible, we can just update the
// API.  The gRPC itself will take care off that, like adding a new fields to
// messages. We just need to follow the gRPC practises and rules.
//
// As said, as long as we can maintain backward compatibility, we are working
// with version 1.0.  The version 2.0 will be introduced when we cannot solve
// something only with the version 1.0. The 2.0 will include all the current
// APIs of 1.0 and we support them both together until the decision shall be
// made to depracate 1.0 totally. The deprecation rules will be specified
// later.

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CmdType defines the current type ot the control mode is operated.
type ModeCmd_CmdType int32

const (
	ModeCmd_NONE        ModeCmd_CmdType = 0 // Reserved for internal use
	ModeCmd_ACCEPT_MODE ModeCmd_CmdType = 1 // Defines the mode how CA conroller interface is working.
)

// Enum value maps for ModeCmd_CmdType.
var (
	ModeCmd_CmdType_name = map[int32]string{
		0: "NONE",
		1: "ACCEPT_MODE",
	}
	ModeCmd_CmdType_value = map[string]int32{
		"NONE":        0,
		"ACCEPT_MODE": 1,
	}
)

func (x ModeCmd_CmdType) Enum() *ModeCmd_CmdType {
	p := new(ModeCmd_CmdType)
	*p = x
	return p
}

func (x ModeCmd_CmdType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModeCmd_CmdType) Descriptor() protoreflect.EnumDescriptor {
	return file_agent_proto_enumTypes[0].Descriptor()
}

func (ModeCmd_CmdType) Type() protoreflect.EnumType {
	return &file_agent_proto_enumTypes[0]
}

func (x ModeCmd_CmdType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModeCmd_CmdType.Descriptor instead.
func (ModeCmd_CmdType) EnumDescriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{0, 0}
}

type ModeCmd_AcceptModeCmd_Mode int32

const (
	// Default mode is same as grpc mode for now.
	ModeCmd_AcceptModeCmd_DEFAULT ModeCmd_AcceptModeCmd_Mode = 0
	// AutoAccept automatically acceps and verifies all request without
	// checking them. Mostly use full for dev and testing.
	ModeCmd_AcceptModeCmd_AUTO_ACCEPT ModeCmd_AcceptModeCmd_Mode = 1
	// CA send issuing and verifying related questions to controller with
	// AgentService.Wait function.
	ModeCmd_AcceptModeCmd_GRPC_CONTROL ModeCmd_AcceptModeCmd_Mode = 2
)

// Enum value maps for ModeCmd_AcceptModeCmd_Mode.
var (
	ModeCmd_AcceptModeCmd_Mode_name = map[int32]string{
		0: "DEFAULT",
		1: "AUTO_ACCEPT",
		2: "GRPC_CONTROL",
	}
	ModeCmd_AcceptModeCmd_Mode_value = map[string]int32{
		"DEFAULT":      0,
		"AUTO_ACCEPT":  1,
		"GRPC_CONTROL": 2,
	}
)

func (x ModeCmd_AcceptModeCmd_Mode) Enum() *ModeCmd_AcceptModeCmd_Mode {
	p := new(ModeCmd_AcceptModeCmd_Mode)
	*p = x
	return p
}

func (x ModeCmd_AcceptModeCmd_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModeCmd_AcceptModeCmd_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_agent_proto_enumTypes[1].Descriptor()
}

func (ModeCmd_AcceptModeCmd_Mode) Type() protoreflect.EnumType {
	return &file_agent_proto_enumTypes[1]
}

func (x ModeCmd_AcceptModeCmd_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModeCmd_AcceptModeCmd_Mode.Descriptor instead.
func (ModeCmd_AcceptModeCmd_Mode) EnumDescriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{0, 0, 0}
}

// Type is enum type to tell what happening
type Notification_Type int32

const (
	Notification_NONE            Notification_Type = 0 // This is set when Question is the actual message
	Notification_KEEPALIVE       Notification_Type = 1 // To prevent network idle to shut us down
	Notification_STATUS_UPDATE   Notification_Type = 2 // General status update where no action is needed
	Notification_PROTOCOL_PAUSED Notification_Type = 3 // Protocol is waiting action with Resume function
)

// Enum value maps for Notification_Type.
var (
	Notification_Type_name = map[int32]string{
		0: "NONE",
		1: "KEEPALIVE",
		2: "STATUS_UPDATE",
		3: "PROTOCOL_PAUSED",
	}
	Notification_Type_value = map[string]int32{
		"NONE":            0,
		"KEEPALIVE":       1,
		"STATUS_UPDATE":   2,
		"PROTOCOL_PAUSED": 3,
	}
)

func (x Notification_Type) Enum() *Notification_Type {
	p := new(Notification_Type)
	*p = x
	return p
}

func (x Notification_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Notification_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_agent_proto_enumTypes[2].Descriptor()
}

func (Notification_Type) Type() protoreflect.EnumType {
	return &file_agent_proto_enumTypes[2]
}

func (x Notification_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Notification_Type.Descriptor instead.
func (Notification_Type) EnumDescriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{14, 0}
}

// Type is enum type to tell what happening. xx_WAITS means that the question
// is waiting for an answer and it should be answered ASAP.
type Question_Type int32

const (
	Question_NONE                Question_Type = 0 // This is set when AgentStatus.Notification is set.
	Question_KEEPALIVE           Question_Type = 1 // To prevent network idle to shut us down, no answer needed
	Question_PING_WAITS          Question_Type = 2 // You have been pinged and you need to answer it
	Question_ISSUE_PROPOSE_WAITS Question_Type = 3 // Issuing is proposed and you need to ACK/NACK
	Question_PROOF_PROPOSE_WAITS Question_Type = 4 // Proof is proposed and you need to ACK/NACK
	Question_PROOF_VERIFY_WAITS  Question_Type = 5 // Proof values need to be verified by you
)

// Enum value maps for Question_Type.
var (
	Question_Type_name = map[int32]string{
		0: "NONE",
		1: "KEEPALIVE",
		2: "PING_WAITS",
		3: "ISSUE_PROPOSE_WAITS",
		4: "PROOF_PROPOSE_WAITS",
		5: "PROOF_VERIFY_WAITS",
	}
	Question_Type_value = map[string]int32{
		"NONE":                0,
		"KEEPALIVE":           1,
		"PING_WAITS":          2,
		"ISSUE_PROPOSE_WAITS": 3,
		"PROOF_PROPOSE_WAITS": 4,
		"PROOF_VERIFY_WAITS":  5,
	}
)

func (x Question_Type) Enum() *Question_Type {
	p := new(Question_Type)
	*p = x
	return p
}

func (x Question_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Question_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_agent_proto_enumTypes[3].Descriptor()
}

func (Question_Type) Type() protoreflect.EnumType {
	return &file_agent_proto_enumTypes[3]
}

func (x Question_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Question_Type.Descriptor instead.
func (Question_Type) EnumDescriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{15, 0}
}

// ModeCmd is cmd to control CA's execution modes. The commands allow easy way
// to extend current behaviour with the existing interface. In the future we
// might have new ways to communicate from CA to its conroller.
type ModeCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeID  ModeCmd_CmdType `protobuf:"varint,1,opt,name=typeID,proto3,enum=agency.v1.ModeCmd_CmdType" json:"typeID,omitempty"` // type of the actual type
	IsInput bool            `protobuf:"varint,2,opt,name=is_input,json=isInput,proto3" json:"is_input,omitempty"`               // this is input cmd, if not this is output aka query cmd
	Info    string          `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`                                     // additional information for the command.
	// Specific control cmd is one of these
	//
	// Types that are assignable to ControlCmd:
	//	*ModeCmd_AcceptMode
	ControlCmd isModeCmd_ControlCmd `protobuf_oneof:"ControlCmd"`
}

func (x *ModeCmd) Reset() {
	*x = ModeCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModeCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModeCmd) ProtoMessage() {}

func (x *ModeCmd) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModeCmd.ProtoReflect.Descriptor instead.
func (*ModeCmd) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{0}
}

func (x *ModeCmd) GetTypeID() ModeCmd_CmdType {
	if x != nil {
		return x.TypeID
	}
	return ModeCmd_NONE
}

func (x *ModeCmd) GetIsInput() bool {
	if x != nil {
		return x.IsInput
	}
	return false
}

func (x *ModeCmd) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (m *ModeCmd) GetControlCmd() isModeCmd_ControlCmd {
	if m != nil {
		return m.ControlCmd
	}
	return nil
}

func (x *ModeCmd) GetAcceptMode() *ModeCmd_AcceptModeCmd {
	if x, ok := x.GetControlCmd().(*ModeCmd_AcceptMode); ok {
		return x.AcceptMode
	}
	return nil
}

type isModeCmd_ControlCmd interface {
	isModeCmd_ControlCmd()
}

type ModeCmd_AcceptMode struct {
	AcceptMode *ModeCmd_AcceptModeCmd `protobuf:"bytes,4,opt,name=accept_mode,json=acceptMode,proto3,oneof"`
}

func (*ModeCmd_AcceptMode) isModeCmd_ControlCmd() {}

// SchemaData is structure to fetch schema information from the ledger.
type SchemaData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID   string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`     // ID is schema ID
	Data string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"` // data is a schema JSON string from the ledger.
}

func (x *SchemaData) Reset() {
	*x = SchemaData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaData) ProtoMessage() {}

func (x *SchemaData) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaData.ProtoReflect.Descriptor instead.
func (*SchemaData) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{1}
}

func (x *SchemaData) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *SchemaData) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// CredDefData is structure to fetch credential definition from the ledger.
type CredDefData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID   string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`     // ID is CredDef ID.
	Data string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"` // data is a cred def JSON string from the ledger.
}

func (x *CredDefData) Reset() {
	*x = CredDefData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CredDefData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredDefData) ProtoMessage() {}

func (x *CredDefData) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredDefData.ProtoReflect.Descriptor instead.
func (*CredDefData) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{2}
}

func (x *CredDefData) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *CredDefData) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// SchemaCreate is structure for schema creation.
type SchemaCreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`             // name is the name of the schema.
	Version    string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`       // version is the schema version.
	Attributes []string `protobuf:"bytes,3,rep,name=attributes,proto3" json:"attributes,omitempty"` // attributes is JSON array string.
}

func (x *SchemaCreate) Reset() {
	*x = SchemaCreate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemaCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaCreate) ProtoMessage() {}

func (x *SchemaCreate) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaCreate.ProtoReflect.Descriptor instead.
func (*SchemaCreate) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{3}
}

func (x *SchemaCreate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SchemaCreate) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *SchemaCreate) GetAttributes() []string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// Schema is structure to transport schema ID.
type Schema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"` // ID is a schema ID.
}

func (x *Schema) Reset() {
	*x = Schema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema) ProtoMessage() {}

func (x *Schema) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema.ProtoReflect.Descriptor instead.
func (*Schema) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{4}
}

func (x *Schema) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

// CredDefCreate is structure to transport credential definition identity.
type CredDefCreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemaID string `protobuf:"bytes,1,opt,name=schemaID,proto3" json:"schemaID,omitempty"` // schemaID is ID of the schema.
	Tag      string `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`           // tag is schema tag.
}

func (x *CredDefCreate) Reset() {
	*x = CredDefCreate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CredDefCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredDefCreate) ProtoMessage() {}

func (x *CredDefCreate) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredDefCreate.ProtoReflect.Descriptor instead.
func (*CredDefCreate) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{5}
}

func (x *CredDefCreate) GetSchemaID() string {
	if x != nil {
		return x.SchemaID
	}
	return ""
}

func (x *CredDefCreate) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

// CredDef is structure to transport credential definition ID.
type CredDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *CredDef) Reset() {
	*x = CredDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CredDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredDef) ProtoMessage() {}

func (x *CredDef) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredDef.ProtoReflect.Descriptor instead.
func (*CredDef) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{6}
}

func (x *CredDef) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

// PingMsg is structure to indentify ping messages.
type PingMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             int32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`                                               // ID is ping message ID.
	PingController bool  `protobuf:"varint,2,opt,name=ping_controller,json=pingController,proto3" json:"ping_controller,omitempty"` // Tells if CA's controller should pinged once.
}

func (x *PingMsg) Reset() {
	*x = PingMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingMsg) ProtoMessage() {}

func (x *PingMsg) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingMsg.ProtoReflect.Descriptor instead.
func (*PingMsg) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{7}
}

func (x *PingMsg) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *PingMsg) GetPingController() bool {
	if x != nil {
		return x.PingController
	}
	return false
}

// SAImplementation is structure to specify SA implementation. TODO: refactor.
type SAImplementation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`                  // Implementation ID.
	Endpoint   string `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`      // For old API, was a web hook address.
	Key        string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`                // For old API, was VerKey, see indy sdk.
	Persistent bool   `protobuf:"varint,4,opt,name=persistent,proto3" json:"persistent,omitempty"` // Tells if information should be saved to wallet.
}

func (x *SAImplementation) Reset() {
	*x = SAImplementation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SAImplementation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SAImplementation) ProtoMessage() {}

func (x *SAImplementation) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SAImplementation.ProtoReflect.Descriptor instead.
func (*SAImplementation) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{8}
}

func (x *SAImplementation) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *SAImplementation) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *SAImplementation) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SAImplementation) GetPersistent() bool {
	if x != nil {
		return x.Persistent
	}
	return false
}

// InvitationBase is structure to create actual Aries invitations. See more info
// from Aries documentation about the fields.
type InvitationBase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label      string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`            // Gives a human readable name for this end of the pairwise.
	ID         string `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`                  // Pairwise ID, must be unique, and no collition w/ previous.
	Expiration int64  `protobuf:"varint,3,opt,name=expiration,proto3" json:"expiration,omitempty"` // not implemented yet
}

func (x *InvitationBase) Reset() {
	*x = InvitationBase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvitationBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvitationBase) ProtoMessage() {}

func (x *InvitationBase) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvitationBase.ProtoReflect.Descriptor instead.
func (*InvitationBase) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{9}
}

func (x *InvitationBase) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *InvitationBase) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *InvitationBase) GetExpiration() int64 {
	if x != nil {
		return x.Expiration
	}
	return 0
}

// Invitation is structure for ready invitation.
type Invitation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JSON string `protobuf:"bytes,1,opt,name=JSON,proto3" json:"JSON,omitempty"` // Actual invitation to be shown to other end.
	URL  string `protobuf:"bytes,2,opt,name=URL,proto3" json:"URL,omitempty"`   // Short URL, not implemented yet
}

func (x *Invitation) Reset() {
	*x = Invitation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Invitation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Invitation) ProtoMessage() {}

func (x *Invitation) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Invitation.ProtoReflect.Descriptor instead.
func (*Invitation) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{10}
}

func (x *Invitation) GetJSON() string {
	if x != nil {
		return x.JSON
	}
	return ""
}

func (x *Invitation) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

//
//Answer is a message send by Give function of Agent service.
type Answer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       string    `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`             // Same as Question ID (UUID)
	ClientID *ClientID `protobuf:"bytes,2,opt,name=clientID,proto3" json:"clientID,omitempty"` // Same as your ClientID when Wait was started
	Ack      bool      `protobuf:"varint,3,opt,name=ack,proto3" json:"ack,omitempty"`          // Response to the protocol question: true = ACK, false = NACK
	Info     string    `protobuf:"bytes,4,opt,name=info,proto3" json:"info,omitempty"`         // General info, mostly used for debugging
}

func (x *Answer) Reset() {
	*x = Answer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Answer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Answer) ProtoMessage() {}

func (x *Answer) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Answer.ProtoReflect.Descriptor instead.
func (*Answer) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{11}
}

func (x *Answer) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Answer) GetClientID() *ClientID {
	if x != nil {
		return x.ClientID
	}
	return nil
}

func (x *Answer) GetAck() bool {
	if x != nil {
		return x.Ack
	}
	return false
}

func (x *Answer) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

// ClientID is UUID. If user has many different client device connected to
// cloud agent it must identify who is talking to.
type ClientID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"` // UUID of the client
}

func (x *ClientID) Reset() {
	*x = ClientID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientID) ProtoMessage() {}

func (x *ClientID) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientID.ProtoReflect.Descriptor instead.
func (*ClientID) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{12}
}

func (x *ClientID) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

//
//AgentStatus is a message identifying current agent events returned as
//notifications. It's also a base message for Question.
type AgentStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientID     *ClientID     `protobuf:"bytes,1,opt,name=clientID,proto3" json:"clientID,omitempty"`         // UUID of the client listening
	Notification *Notification `protobuf:"bytes,3,opt,name=notification,proto3" json:"notification,omitempty"` // The actual Notification message
}

func (x *AgentStatus) Reset() {
	*x = AgentStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentStatus) ProtoMessage() {}

func (x *AgentStatus) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentStatus.ProtoReflect.Descriptor instead.
func (*AgentStatus) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{13}
}

func (x *AgentStatus) GetClientID() *ClientID {
	if x != nil {
		return x.ClientID
	}
	return nil
}

func (x *AgentStatus) GetNotification() *Notification {
	if x != nil {
		return x.Notification
	}
	return nil
}

//
//Notification is a message used to tell meaningful events outside from cloud
//agent. It includes only header information. If more detailed information about
//the Protocol is needed ProtocolService.Status should be called. Notification is
//a base message for AgentStatus.
type Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeID         Notification_Type `protobuf:"varint,1,opt,name=typeID,proto3,enum=agency.v1.Notification_Type" json:"typeID,omitempty"`     // Notification type, see Type
	ID             string            `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`                                               // Notification's unique ID
	ConnectionID   string            `protobuf:"bytes,3,opt,name=connectionID,proto3" json:"connectionID,omitempty"`                           // Current pairwise ID between agents
	ProtocolID     string            `protobuf:"bytes,4,opt,name=protocolID,proto3" json:"protocolID,omitempty"`                               // Current protocol ID, see Aries Thread ID
	ProtocolFamily string            `protobuf:"bytes,5,opt,name=protocol_family,json=protocolFamily,proto3" json:"protocol_family,omitempty"` // Text version of the protocol family/namespace
	Timestamp      int64             `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                // timestamp in nano because this is part of the key
	ProtocolType   Protocol_Type     `protobuf:"varint,7,opt,name=protocol_type,json=protocolType,proto3,enum=agency.v1.Protocol_Type" json:"protocol_type,omitempty"`
	Role           Protocol_Role     `protobuf:"varint,8,opt,name=role,proto3,enum=agency.v1.Protocol_Role" json:"role,omitempty"`
	PID            string            `protobuf:"bytes,9,opt,name=PID,proto3" json:"PID,omitempty"`
}

func (x *Notification) Reset() {
	*x = Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notification) ProtoMessage() {}

func (x *Notification) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notification.ProtoReflect.Descriptor instead.
func (*Notification) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{14}
}

func (x *Notification) GetTypeID() Notification_Type {
	if x != nil {
		return x.TypeID
	}
	return Notification_NONE
}

func (x *Notification) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Notification) GetConnectionID() string {
	if x != nil {
		return x.ConnectionID
	}
	return ""
}

func (x *Notification) GetProtocolID() string {
	if x != nil {
		return x.ProtocolID
	}
	return ""
}

func (x *Notification) GetProtocolFamily() string {
	if x != nil {
		return x.ProtocolFamily
	}
	return ""
}

func (x *Notification) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Notification) GetProtocolType() Protocol_Type {
	if x != nil {
		return x.ProtocolType
	}
	return Protocol_NONE
}

func (x *Notification) GetRole() Protocol_Role {
	if x != nil {
		return x.Role
	}
	return Protocol_UNKNOWN
}

func (x *Notification) GetPID() string {
	if x != nil {
		return x.PID
	}
	return ""
}

// Question is a message for questions sent by cloud agent to its controller aka
// service agent. Current API uses bidirectional streams for immetiate questions
// araised during the protocol execution.
type Question struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *AgentStatus  `protobuf:"bytes,1,opt,name=Status,proto3" json:"Status,omitempty"`
	TypeID Question_Type `protobuf:"varint,2,opt,name=typeID,proto3,enum=agency.v1.Question_Type" json:"typeID,omitempty"` // Question type, see Type
	// Types that are assignable to Question:
	//	*Question_IssuePropose
	//	*Question_ProofVerify
	Question isQuestion_Question `protobuf_oneof:"Question"`
}

func (x *Question) Reset() {
	*x = Question{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Question) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Question) ProtoMessage() {}

func (x *Question) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Question.ProtoReflect.Descriptor instead.
func (*Question) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{15}
}

func (x *Question) GetStatus() *AgentStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Question) GetTypeID() Question_Type {
	if x != nil {
		return x.TypeID
	}
	return Question_NONE
}

func (m *Question) GetQuestion() isQuestion_Question {
	if m != nil {
		return m.Question
	}
	return nil
}

func (x *Question) GetIssuePropose() *Question_IssueProposeMsg {
	if x, ok := x.GetQuestion().(*Question_IssuePropose); ok {
		return x.IssuePropose
	}
	return nil
}

func (x *Question) GetProofVerify() *Question_ProofVerifyMsg {
	if x, ok := x.GetQuestion().(*Question_ProofVerify); ok {
		return x.ProofVerify
	}
	return nil
}

type isQuestion_Question interface {
	isQuestion_Question()
}

type Question_IssuePropose struct {
	IssuePropose *Question_IssueProposeMsg `protobuf:"bytes,3,opt,name=issue_propose,json=issuePropose,proto3,oneof"`
}

type Question_ProofVerify struct {
	ProofVerify *Question_ProofVerifyMsg `protobuf:"bytes,4,opt,name=proof_verify,json=proofVerify,proto3,oneof"`
}

func (*Question_IssuePropose) isQuestion_Question() {}

func (*Question_ProofVerify) isQuestion_Question() {}

// AcceptModeCmd is the sub type for the actual cmd. With it we can setup how
// the CA handles situations where decision is needed. For testing and dev
// there is an auto accept mode where CA just sends ACKs to to other end
// without asking controller's help for it.
type ModeCmd_AcceptModeCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode ModeCmd_AcceptModeCmd_Mode `protobuf:"varint,1,opt,name=mode,proto3,enum=agency.v1.ModeCmd_AcceptModeCmd_Mode" json:"mode,omitempty"` // Mode is the mode actual be set or pervious mode
}

func (x *ModeCmd_AcceptModeCmd) Reset() {
	*x = ModeCmd_AcceptModeCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModeCmd_AcceptModeCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModeCmd_AcceptModeCmd) ProtoMessage() {}

func (x *ModeCmd_AcceptModeCmd) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModeCmd_AcceptModeCmd.ProtoReflect.Descriptor instead.
func (*ModeCmd_AcceptModeCmd) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ModeCmd_AcceptModeCmd) GetMode() ModeCmd_AcceptModeCmd_Mode {
	if x != nil {
		return x.Mode
	}
	return ModeCmd_AcceptModeCmd_DEFAULT
}

// IssueProposeMsg is sent when a Holder wants to alert Issuer to issue a new
// credential. The Holder defines the cred_defID and values to VC attributes.
type Question_IssueProposeMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CredDefID string `protobuf:"bytes,1,opt,name=cred_defID,json=credDefID,proto3" json:"cred_defID,omitempty"` // The ID of the credential to issue.
	// valuesJSON is currently used for PreviewCredentialToCodedVales (see
	// findy-agent) and for that reason the excat format or layot is not clear.
	// TODO: we refactor this later.
	ValuesJSON string `protobuf:"bytes,2,opt,name=valuesJSON,proto3" json:"valuesJSON,omitempty"`
}

func (x *Question_IssueProposeMsg) Reset() {
	*x = Question_IssueProposeMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Question_IssueProposeMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Question_IssueProposeMsg) ProtoMessage() {}

func (x *Question_IssueProposeMsg) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Question_IssueProposeMsg.ProtoReflect.Descriptor instead.
func (*Question_IssueProposeMsg) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{15, 0}
}

func (x *Question_IssueProposeMsg) GetCredDefID() string {
	if x != nil {
		return x.CredDefID
	}
	return ""
}

func (x *Question_IssueProposeMsg) GetValuesJSON() string {
	if x != nil {
		return x.ValuesJSON
	}
	return ""
}

// ProofVerifyMsg is sent 1) when a Holder wants to present a proof before
// Verifier is sent a proof request OR 2) when proof values need to be
// verified.
type Question_ProofVerifyMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attributes []*Question_ProofVerifyMsg_Attribute `protobuf:"bytes,1,rep,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *Question_ProofVerifyMsg) Reset() {
	*x = Question_ProofVerifyMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Question_ProofVerifyMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Question_ProofVerifyMsg) ProtoMessage() {}

func (x *Question_ProofVerifyMsg) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Question_ProofVerifyMsg.ProtoReflect.Descriptor instead.
func (*Question_ProofVerifyMsg) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{15, 1}
}

func (x *Question_ProofVerifyMsg) GetAttributes() []*Question_ProofVerifyMsg_Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type Question_ProofVerifyMsg_Attribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CredDefID string `protobuf:"bytes,3,opt,name=cred_defID,json=credDefID,proto3" json:"cred_defID,omitempty"`
}

func (x *Question_ProofVerifyMsg_Attribute) Reset() {
	*x = Question_ProofVerifyMsg_Attribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Question_ProofVerifyMsg_Attribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Question_ProofVerifyMsg_Attribute) ProtoMessage() {}

func (x *Question_ProofVerifyMsg_Attribute) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Question_ProofVerifyMsg_Attribute.ProtoReflect.Descriptor instead.
func (*Question_ProofVerifyMsg_Attribute) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{15, 1, 0}
}

func (x *Question_ProofVerifyMsg_Attribute) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Question_ProofVerifyMsg_Attribute) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Question_ProofVerifyMsg_Attribute) GetCredDefID() string {
	if x != nil {
		return x.CredDefID
	}
	return ""
}

var File_agent_proto protoreflect.FileDescriptor

var file_agent_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x61,
	0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x1a, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xea, 0x02, 0x0a, 0x07, 0x4d, 0x6f, 0x64,
	0x65, 0x43, 0x6d, 0x64, 0x12, 0x32, 0x0a, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6d, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x43, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6d, 0x64,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6d, 0x64, 0x48, 0x00,
	0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x1a, 0x82, 0x01, 0x0a,
	0x0d, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6d, 0x64, 0x12, 0x39,
	0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6d, 0x64,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6d, 0x64, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x36, 0x0a, 0x04, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0b, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x10, 0x01, 0x12,
	0x10, 0x0a, 0x0c, 0x47, 0x52, 0x50, 0x43, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x10,
	0x02, 0x22, 0x24, 0x0a, 0x07, 0x43, 0x6d, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x43, 0x6d, 0x64, 0x22, 0x30, 0x0a, 0x0a, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x31, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x64, 0x44,
	0x65, 0x66, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5c, 0x0a, 0x0c, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x18, 0x0a, 0x06, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x44, 0x22, 0x3d, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x64, 0x44, 0x65, 0x66, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x44, 0x12,
	0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61,
	0x67, 0x22, 0x19, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x64, 0x44, 0x65, 0x66, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x42, 0x0a, 0x07,
	0x50, 0x69, 0x6e, 0x67, 0x4d, 0x73, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x69, 0x6e, 0x67, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x22, 0x70, 0x0a, 0x10, 0x53, 0x41, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x74, 0x22, 0x56, 0x0a, 0x0e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x32, 0x0a, 0x0a, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x4a, 0x53, 0x4f, 0x4e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x10, 0x0a, 0x03,
	0x55, 0x52, 0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x52, 0x4c, 0x22, 0x6f,
	0x0a, 0x06, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x52,
	0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22,
	0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x7b, 0x0a, 0x0b, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x3b, 0x0a, 0x0c, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa7, 0x03, 0x0a, 0x0c, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x06, 0x74, 0x79, 0x70,
	0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49,
	0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3d, 0x0a, 0x0d, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x6f, 0x6c,
	0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x49, 0x44, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x50, 0x49, 0x44, 0x22, 0x47, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4b,
	0x45, 0x45, 0x50, 0x41, 0x4c, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x13, 0x0a,
	0x0f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44,
	0x10, 0x03, 0x22, 0x91, 0x05, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2e, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x30, 0x0a, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49,
	0x44, 0x12, 0x4a, 0x0a, 0x0d, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52,
	0x0c, 0x69, 0x73, 0x73, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x47, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x1a, 0x50, 0x0a, 0x0f, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x64, 0x5f, 0x64, 0x65, 0x66, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x64, 0x44, 0x65, 0x66, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x1a, 0xb4, 0x01, 0x0a, 0x0e, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4d, 0x73, 0x67, 0x12, 0x4c, 0x0a, 0x0a, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x4d, 0x73, 0x67, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x54, 0x0a, 0x09, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x66, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x64, 0x44, 0x65, 0x66, 0x49, 0x44, 0x22,
	0x79, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4b, 0x45, 0x45, 0x50, 0x41, 0x4c, 0x49, 0x56, 0x45, 0x10, 0x01,
	0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x53, 0x10, 0x02,
	0x12, 0x17, 0x0a, 0x13, 0x49, 0x53, 0x53, 0x55, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53,
	0x45, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x53, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x4f,
	0x4f, 0x46, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x45, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x53,
	0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x4f, 0x4f, 0x46, 0x5f, 0x56, 0x45, 0x52, 0x49,
	0x46, 0x59, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x53, 0x10, 0x05, 0x42, 0x0a, 0x0a, 0x08, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0xd2, 0x04, 0x0a, 0x0c, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x4c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x12, 0x13, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x1a, 0x16, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x34, 0x0a, 0x04, 0x57, 0x61, 0x69, 0x74, 0x12, 0x13, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x1a,
	0x13, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x30, 0x01, 0x12, 0x30, 0x0a, 0x04, 0x47, 0x69, 0x76, 0x65,
	0x12, 0x11, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x1a, 0x13, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x10, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x1a, 0x15, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x00, 0x12, 0x30, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x4d, 0x73, 0x67, 0x1a, 0x12,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x4d,
	0x73, 0x67, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x12, 0x17, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x1a, 0x11, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64,
	0x44, 0x65, 0x66, 0x12, 0x18, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x64, 0x44, 0x65, 0x66, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x1a, 0x12, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x44, 0x65,
	0x66, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x12, 0x11, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x1a, 0x15, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0a,
	0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x44, 0x65, 0x66, 0x12, 0x12, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x44, 0x65, 0x66, 0x1a, 0x16,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x44,
	0x65, 0x66, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x12, 0x12, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x43, 0x6d, 0x64, 0x1a, 0x12, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6d, 0x64, 0x22, 0x00, 0x42, 0x39, 0x5a, 0x37, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x69, 0x6e, 0x64, 0x79, 0x2d,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x66, 0x69, 0x6e, 0x64, 0x79, 0x2d, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x61, 0x67, 0x65,
	0x6e, 0x63, 0x79, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_agent_proto_rawDescOnce sync.Once
	file_agent_proto_rawDescData = file_agent_proto_rawDesc
)

func file_agent_proto_rawDescGZIP() []byte {
	file_agent_proto_rawDescOnce.Do(func() {
		file_agent_proto_rawDescData = protoimpl.X.CompressGZIP(file_agent_proto_rawDescData)
	})
	return file_agent_proto_rawDescData
}

var file_agent_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_agent_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_agent_proto_goTypes = []interface{}{
	(ModeCmd_CmdType)(0),                      // 0: agency.v1.ModeCmd.CmdType
	(ModeCmd_AcceptModeCmd_Mode)(0),           // 1: agency.v1.ModeCmd.AcceptModeCmd.Mode
	(Notification_Type)(0),                    // 2: agency.v1.Notification.Type
	(Question_Type)(0),                        // 3: agency.v1.Question.Type
	(*ModeCmd)(nil),                           // 4: agency.v1.ModeCmd
	(*SchemaData)(nil),                        // 5: agency.v1.SchemaData
	(*CredDefData)(nil),                       // 6: agency.v1.CredDefData
	(*SchemaCreate)(nil),                      // 7: agency.v1.SchemaCreate
	(*Schema)(nil),                            // 8: agency.v1.Schema
	(*CredDefCreate)(nil),                     // 9: agency.v1.CredDefCreate
	(*CredDef)(nil),                           // 10: agency.v1.CredDef
	(*PingMsg)(nil),                           // 11: agency.v1.PingMsg
	(*SAImplementation)(nil),                  // 12: agency.v1.SAImplementation
	(*InvitationBase)(nil),                    // 13: agency.v1.InvitationBase
	(*Invitation)(nil),                        // 14: agency.v1.Invitation
	(*Answer)(nil),                            // 15: agency.v1.Answer
	(*ClientID)(nil),                          // 16: agency.v1.ClientID
	(*AgentStatus)(nil),                       // 17: agency.v1.AgentStatus
	(*Notification)(nil),                      // 18: agency.v1.Notification
	(*Question)(nil),                          // 19: agency.v1.Question
	(*ModeCmd_AcceptModeCmd)(nil),             // 20: agency.v1.ModeCmd.AcceptModeCmd
	(*Question_IssueProposeMsg)(nil),          // 21: agency.v1.Question.IssueProposeMsg
	(*Question_ProofVerifyMsg)(nil),           // 22: agency.v1.Question.ProofVerifyMsg
	(*Question_ProofVerifyMsg_Attribute)(nil), // 23: agency.v1.Question.ProofVerifyMsg.Attribute
	(Protocol_Type)(0),                        // 24: agency.v1.Protocol.Type
	(Protocol_Role)(0),                        // 25: agency.v1.Protocol.Role
}
var file_agent_proto_depIdxs = []int32{
	0,  // 0: agency.v1.ModeCmd.typeID:type_name -> agency.v1.ModeCmd.CmdType
	20, // 1: agency.v1.ModeCmd.accept_mode:type_name -> agency.v1.ModeCmd.AcceptModeCmd
	16, // 2: agency.v1.Answer.clientID:type_name -> agency.v1.ClientID
	16, // 3: agency.v1.AgentStatus.clientID:type_name -> agency.v1.ClientID
	18, // 4: agency.v1.AgentStatus.notification:type_name -> agency.v1.Notification
	2,  // 5: agency.v1.Notification.typeID:type_name -> agency.v1.Notification.Type
	24, // 6: agency.v1.Notification.protocol_type:type_name -> agency.v1.Protocol.Type
	25, // 7: agency.v1.Notification.role:type_name -> agency.v1.Protocol.Role
	17, // 8: agency.v1.Question.Status:type_name -> agency.v1.AgentStatus
	3,  // 9: agency.v1.Question.typeID:type_name -> agency.v1.Question.Type
	21, // 10: agency.v1.Question.issue_propose:type_name -> agency.v1.Question.IssueProposeMsg
	22, // 11: agency.v1.Question.proof_verify:type_name -> agency.v1.Question.ProofVerifyMsg
	1,  // 12: agency.v1.ModeCmd.AcceptModeCmd.mode:type_name -> agency.v1.ModeCmd.AcceptModeCmd.Mode
	23, // 13: agency.v1.Question.ProofVerifyMsg.attributes:type_name -> agency.v1.Question.ProofVerifyMsg.Attribute
	16, // 14: agency.v1.AgentService.Listen:input_type -> agency.v1.ClientID
	16, // 15: agency.v1.AgentService.Wait:input_type -> agency.v1.ClientID
	15, // 16: agency.v1.AgentService.Give:input_type -> agency.v1.Answer
	13, // 17: agency.v1.AgentService.CreateInvitation:input_type -> agency.v1.InvitationBase
	11, // 18: agency.v1.AgentService.Ping:input_type -> agency.v1.PingMsg
	7,  // 19: agency.v1.AgentService.CreateSchema:input_type -> agency.v1.SchemaCreate
	9,  // 20: agency.v1.AgentService.CreateCredDef:input_type -> agency.v1.CredDefCreate
	8,  // 21: agency.v1.AgentService.GetSchema:input_type -> agency.v1.Schema
	10, // 22: agency.v1.AgentService.GetCredDef:input_type -> agency.v1.CredDef
	4,  // 23: agency.v1.AgentService.Enter:input_type -> agency.v1.ModeCmd
	17, // 24: agency.v1.AgentService.Listen:output_type -> agency.v1.AgentStatus
	19, // 25: agency.v1.AgentService.Wait:output_type -> agency.v1.Question
	16, // 26: agency.v1.AgentService.Give:output_type -> agency.v1.ClientID
	14, // 27: agency.v1.AgentService.CreateInvitation:output_type -> agency.v1.Invitation
	11, // 28: agency.v1.AgentService.Ping:output_type -> agency.v1.PingMsg
	8,  // 29: agency.v1.AgentService.CreateSchema:output_type -> agency.v1.Schema
	10, // 30: agency.v1.AgentService.CreateCredDef:output_type -> agency.v1.CredDef
	5,  // 31: agency.v1.AgentService.GetSchema:output_type -> agency.v1.SchemaData
	6,  // 32: agency.v1.AgentService.GetCredDef:output_type -> agency.v1.CredDefData
	4,  // 33: agency.v1.AgentService.Enter:output_type -> agency.v1.ModeCmd
	24, // [24:34] is the sub-list for method output_type
	14, // [14:24] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_agent_proto_init() }
func file_agent_proto_init() {
	if File_agent_proto != nil {
		return
	}
	file_protocol_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_agent_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModeCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchemaData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CredDefData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchemaCreate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CredDefCreate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CredDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SAImplementation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvitationBase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Invitation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Answer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Question); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModeCmd_AcceptModeCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Question_IssueProposeMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Question_ProofVerifyMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Question_ProofVerifyMsg_Attribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_agent_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ModeCmd_AcceptMode)(nil),
	}
	file_agent_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*Question_IssuePropose)(nil),
		(*Question_ProofVerify)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_agent_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_agent_proto_goTypes,
		DependencyIndexes: file_agent_proto_depIdxs,
		EnumInfos:         file_agent_proto_enumTypes,
		MessageInfos:      file_agent_proto_msgTypes,
	}.Build()
	File_agent_proto = out.File
	file_agent_proto_rawDesc = nil
	file_agent_proto_goTypes = nil
	file_agent_proto_depIdxs = nil
}
