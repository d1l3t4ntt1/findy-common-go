// Copyright 2020 Harri @ OP Techlab.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: protocol.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Type is enum type to identify the protocol, we aren't tight to Aries
// strings
type Protocol_Type int32

const (
	Protocol_NONE             Protocol_Type = 0
	Protocol_DIDEXCHANGE      Protocol_Type = 1
	Protocol_ISSUE_CREDENTIAL Protocol_Type = 2
	Protocol_PRESENT_PROOF    Protocol_Type = 3
	Protocol_TRUST_PING       Protocol_Type = 4
	Protocol_BASIC_MESSAGE    Protocol_Type = 5
)

// Enum value maps for Protocol_Type.
var (
	Protocol_Type_name = map[int32]string{
		0: "NONE",
		1: "DIDEXCHANGE",
		2: "ISSUE_CREDENTIAL",
		3: "PRESENT_PROOF",
		4: "TRUST_PING",
		5: "BASIC_MESSAGE",
	}
	Protocol_Type_value = map[string]int32{
		"NONE":             0,
		"DIDEXCHANGE":      1,
		"ISSUE_CREDENTIAL": 2,
		"PRESENT_PROOF":    3,
		"TRUST_PING":       4,
		"BASIC_MESSAGE":    5,
	}
)

func (x Protocol_Type) Enum() *Protocol_Type {
	p := new(Protocol_Type)
	*p = x
	return p
}

func (x Protocol_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Protocol_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_proto_enumTypes[0].Descriptor()
}

func (Protocol_Type) Type() protoreflect.EnumType {
	return &file_protocol_proto_enumTypes[0]
}

func (x Protocol_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Protocol_Type.Descriptor instead.
func (Protocol_Type) EnumDescriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{0, 0}
}

// Role tells in what role we are starting a protocol
type Protocol_Role int32

const (
	Protocol_UNKNOWN   Protocol_Role = 0
	Protocol_INITIATOR Protocol_Role = 1
	Protocol_ADDRESSEE Protocol_Role = 2
	Protocol_RESUMER   Protocol_Role = 3 // Tells what to do with a paused protocol, waiting user action
)

// Enum value maps for Protocol_Role.
var (
	Protocol_Role_name = map[int32]string{
		0: "UNKNOWN",
		1: "INITIATOR",
		2: "ADDRESSEE",
		3: "RESUMER",
	}
	Protocol_Role_value = map[string]int32{
		"UNKNOWN":   0,
		"INITIATOR": 1,
		"ADDRESSEE": 2,
		"RESUMER":   3,
	}
)

func (x Protocol_Role) Enum() *Protocol_Role {
	p := new(Protocol_Role)
	*p = x
	return p
}

func (x Protocol_Role) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Protocol_Role) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_proto_enumTypes[1].Descriptor()
}

func (Protocol_Role) Type() protoreflect.EnumType {
	return &file_protocol_proto_enumTypes[1]
}

func (x Protocol_Role) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Protocol_Role.Descriptor instead.
func (Protocol_Role) EnumDescriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{0, 1}
}

// State tells protocol machine's state at the API level
type ProtocolState_State int32

const (
	ProtocolState_RUNNING     ProtocolState_State = 0 // Protocol is just started or it's still running
	ProtocolState_OK          ProtocolState_State = 1 // Protocol is finalized successfully
	ProtocolState_ERR         ProtocolState_State = 2 // Protocol is stopped with an error, Not other end's NACK!
	ProtocolState_WAIT_ACTION ProtocolState_State = 3 // Protocol is waiting user's action to continue
	ProtocolState_ACK         ProtocolState_State = 4 // Input only: currently API caller can tell to proceed
	ProtocolState_NACK        ProtocolState_State = 5 // In&out: we or other agent can decline the protocol execution
)

// Enum value maps for ProtocolState_State.
var (
	ProtocolState_State_name = map[int32]string{
		0: "RUNNING",
		1: "OK",
		2: "ERR",
		3: "WAIT_ACTION",
		4: "ACK",
		5: "NACK",
	}
	ProtocolState_State_value = map[string]int32{
		"RUNNING":     0,
		"OK":          1,
		"ERR":         2,
		"WAIT_ACTION": 3,
		"ACK":         4,
		"NACK":        5,
	}
)

func (x ProtocolState_State) Enum() *ProtocolState_State {
	p := new(ProtocolState_State)
	*p = x
	return p
}

func (x ProtocolState_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtocolState_State) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_proto_enumTypes[2].Descriptor()
}

func (ProtocolState_State) Type() protoreflect.EnumType {
	return &file_protocol_proto_enumTypes[2]
}

func (x ProtocolState_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtocolState_State.Descriptor instead.
func (ProtocolState_State) EnumDescriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{2, 0}
}

//
//Protocol is a interface message for ProtocolService.Start/Run. The protocol
//message complements e.g. Start function to the following pseudo code:
//ProtocolService.Start(Protocol{TypeId: DIDEXCHANGE, Role: INITIATOR})
//which can be read as:
//// Start DIDEXCHANGE Protocol as INITIATOR
//The DIDComm/Aries protocol is always defined with the protocol's typeID and
//together with the role they define how the protocol will be started. The table
//below lists few examples.
//Protocol.TypeID        (as)  Role              Meaning
//------------------------------------------------------------------------
//DIDEXCHANGE                   INITIATOR         connect to other agent
//ISSUE_CREDENTIAL              ADDRESSEE         request credential
//PRESENT_PROOF                 RESUMER           accept proof request
//BASIC_MESSAGE                 INITIATOR         send basic message
//
//The rest of the fields in Protocol include prev_threadID and connectionID. The
//StartMsg fields include typeID specific data.
type Protocol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeID       Protocol_Type `protobuf:"varint,1,opt,name=typeID,proto3,enum=agency.v1.Protocol_Type" json:"typeID,omitempty"` // Protocol type
	Role         Protocol_Role `protobuf:"varint,2,opt,name=role,proto3,enum=agency.v1.Protocol_Role" json:"role,omitempty"`
	PrevThreadID string        `protobuf:"bytes,3,opt,name=prev_threadID,json=prevThreadID,proto3" json:"prev_threadID,omitempty"` // Previous protocol ID if there was any
	ConnectionID string        `protobuf:"bytes,4,opt,name=connectionID,proto3" json:"connectionID,omitempty"`                     // pairwise ID, this only empty when Type is CONNECT
	// Protocol typeID specific data
	//
	// Types that are assignable to StartMsg:
	//	*Protocol_DIDExchange
	//	*Protocol_IssueCredential
	//	*Protocol_PresentProof
	//	*Protocol_BasicMessage
	StartMsg isProtocol_StartMsg `protobuf_oneof:"StartMsg"`
}

func (x *Protocol) Reset() {
	*x = Protocol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Protocol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Protocol) ProtoMessage() {}

func (x *Protocol) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Protocol.ProtoReflect.Descriptor instead.
func (*Protocol) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{0}
}

func (x *Protocol) GetTypeID() Protocol_Type {
	if x != nil {
		return x.TypeID
	}
	return Protocol_NONE
}

func (x *Protocol) GetRole() Protocol_Role {
	if x != nil {
		return x.Role
	}
	return Protocol_UNKNOWN
}

func (x *Protocol) GetPrevThreadID() string {
	if x != nil {
		return x.PrevThreadID
	}
	return ""
}

func (x *Protocol) GetConnectionID() string {
	if x != nil {
		return x.ConnectionID
	}
	return ""
}

func (m *Protocol) GetStartMsg() isProtocol_StartMsg {
	if m != nil {
		return m.StartMsg
	}
	return nil
}

func (x *Protocol) GetDIDExchange() *Protocol_DIDExchangeMsg {
	if x, ok := x.GetStartMsg().(*Protocol_DIDExchange); ok {
		return x.DIDExchange
	}
	return nil
}

func (x *Protocol) GetIssueCredential() *Protocol_IssueCredentialMsg {
	if x, ok := x.GetStartMsg().(*Protocol_IssueCredential); ok {
		return x.IssueCredential
	}
	return nil
}

func (x *Protocol) GetPresentProof() *Protocol_PresentProofMsg {
	if x, ok := x.GetStartMsg().(*Protocol_PresentProof); ok {
		return x.PresentProof
	}
	return nil
}

func (x *Protocol) GetBasicMessage() *Protocol_BasicMessageMsg {
	if x, ok := x.GetStartMsg().(*Protocol_BasicMessage); ok {
		return x.BasicMessage
	}
	return nil
}

type isProtocol_StartMsg interface {
	isProtocol_StartMsg()
}

type Protocol_DIDExchange struct {
	DIDExchange *Protocol_DIDExchangeMsg `protobuf:"bytes,10,opt,name=DID_exchange,json=DIDExchange,proto3,oneof"`
}

type Protocol_IssueCredential struct {
	IssueCredential *Protocol_IssueCredentialMsg `protobuf:"bytes,11,opt,name=issue_credential,json=issueCredential,proto3,oneof"`
}

type Protocol_PresentProof struct {
	PresentProof *Protocol_PresentProofMsg `protobuf:"bytes,12,opt,name=present_proof,json=presentProof,proto3,oneof"`
}

type Protocol_BasicMessage struct {
	BasicMessage *Protocol_BasicMessageMsg `protobuf:"bytes,13,opt,name=basic_message,json=basicMessage,proto3,oneof"`
}

func (*Protocol_DIDExchange) isProtocol_StartMsg() {}

func (*Protocol_IssueCredential) isProtocol_StartMsg() {}

func (*Protocol_PresentProof) isProtocol_StartMsg() {}

func (*Protocol_BasicMessage) isProtocol_StartMsg() {}

//
//ProtocolID is a primary minimal identification of the _current_ protocol
//conversation. Protocol is an elementary concept in SSI. With the protocols we
//build the trust over the state of the connection (aka pairwise). That's why the
//connection ID is always the most important thing and we should drive towards
//reuse of the previous connection when ever it's possible. Still, we operate with
//protocols.
type ProtocolID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeID           Protocol_Type `protobuf:"varint,1,opt,name=typeID,proto3,enum=agency.v1.Protocol_Type" json:"typeID,omitempty"`                // i.e. what is going on
	Role             Protocol_Role `protobuf:"varint,2,opt,name=role,proto3,enum=agency.v1.Protocol_Role" json:"role,omitempty"`                    // i.e. did we start this or the other end etc.
	ID               string        `protobuf:"bytes,3,opt,name=ID,proto3" json:"ID,omitempty"`                                                      // UUID of the current protocol, note! not the same as conn-id
	NotificationTime int64         `protobuf:"varint,4,opt,name=notification_time,json=notificationTime,proto3" json:"notification_time,omitempty"` // part of the key (see notification) TODO check!
}

func (x *ProtocolID) Reset() {
	*x = ProtocolID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolID) ProtoMessage() {}

func (x *ProtocolID) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolID.ProtoReflect.Descriptor instead.
func (*ProtocolID) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{1}
}

func (x *ProtocolID) GetTypeID() Protocol_Type {
	if x != nil {
		return x.TypeID
	}
	return Protocol_NONE
}

func (x *ProtocolID) GetRole() Protocol_Role {
	if x != nil {
		return x.Role
	}
	return Protocol_UNKNOWN
}

func (x *ProtocolID) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ProtocolID) GetNotificationTime() int64 {
	if x != nil {
		return x.NotificationTime
	}
	return 0
}

// ProtocolState is lightest and simplest way to tell outside what is going on
// during a protocol run.
type ProtocolState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolID *ProtocolID         `protobuf:"bytes,1,opt,name=protocolID,proto3" json:"protocolID,omitempty"`
	State      ProtocolState_State `protobuf:"varint,2,opt,name=state,proto3,enum=agency.v1.ProtocolState_State" json:"state,omitempty"` // See the State enum, tells whats going on
	Info       string              `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`                                       // Extra information, mostly used for debugging
}

func (x *ProtocolState) Reset() {
	*x = ProtocolState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolState) ProtoMessage() {}

func (x *ProtocolState) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolState.ProtoReflect.Descriptor instead.
func (*ProtocolState) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{2}
}

func (x *ProtocolState) GetProtocolID() *ProtocolID {
	if x != nil {
		return x.ProtocolID
	}
	return nil
}

func (x *ProtocolState) GetState() ProtocolState_State {
	if x != nil {
		return x.State
	}
	return ProtocolState_RUNNING
}

func (x *ProtocolState) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

//
//ProtocolStatus is message to include whole status of the protocol.
//TODO: should we think about Aries thread and decorator structure as well? e.g.
//BasicMsg
type ProtocolStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State      *ProtocolState `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Timestamp  int64          `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	StatusJson string         `protobuf:"bytes,3,opt,name=status_json,json=statusJson,proto3" json:"status_json,omitempty"`
	// Types that are assignable to Status:
	//	*ProtocolStatus_Connection_
	//	*ProtocolStatus_Issue_
	//	*ProtocolStatus_Proof
	//	*ProtocolStatus_TrustPing_
	//	*ProtocolStatus_BasicMessage_
	Status isProtocolStatus_Status `protobuf_oneof:"Status"`
}

func (x *ProtocolStatus) Reset() {
	*x = ProtocolStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolStatus) ProtoMessage() {}

func (x *ProtocolStatus) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolStatus.ProtoReflect.Descriptor instead.
func (*ProtocolStatus) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{3}
}

func (x *ProtocolStatus) GetState() *ProtocolState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *ProtocolStatus) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ProtocolStatus) GetStatusJson() string {
	if x != nil {
		return x.StatusJson
	}
	return ""
}

func (m *ProtocolStatus) GetStatus() isProtocolStatus_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (x *ProtocolStatus) GetConnection() *ProtocolStatus_Connection {
	if x, ok := x.GetStatus().(*ProtocolStatus_Connection_); ok {
		return x.Connection
	}
	return nil
}

func (x *ProtocolStatus) GetIssue() *ProtocolStatus_Issue {
	if x, ok := x.GetStatus().(*ProtocolStatus_Issue_); ok {
		return x.Issue
	}
	return nil
}

func (x *ProtocolStatus) GetProof() *Protocol_Proof {
	if x, ok := x.GetStatus().(*ProtocolStatus_Proof); ok {
		return x.Proof
	}
	return nil
}

func (x *ProtocolStatus) GetTrustPing() *ProtocolStatus_TrustPing {
	if x, ok := x.GetStatus().(*ProtocolStatus_TrustPing_); ok {
		return x.TrustPing
	}
	return nil
}

func (x *ProtocolStatus) GetBasicMessage() *ProtocolStatus_BasicMessage {
	if x, ok := x.GetStatus().(*ProtocolStatus_BasicMessage_); ok {
		return x.BasicMessage
	}
	return nil
}

type isProtocolStatus_Status interface {
	isProtocolStatus_Status()
}

type ProtocolStatus_Connection_ struct {
	Connection *ProtocolStatus_Connection `protobuf:"bytes,10,opt,name=connection,proto3,oneof"`
}

type ProtocolStatus_Issue_ struct {
	Issue *ProtocolStatus_Issue `protobuf:"bytes,11,opt,name=issue,proto3,oneof"`
}

type ProtocolStatus_Proof struct {
	Proof *Protocol_Proof `protobuf:"bytes,12,opt,name=proof,proto3,oneof"`
}

type ProtocolStatus_TrustPing_ struct {
	TrustPing *ProtocolStatus_TrustPing `protobuf:"bytes,13,opt,name=trust_ping,json=trustPing,proto3,oneof"`
}

type ProtocolStatus_BasicMessage_ struct {
	BasicMessage *ProtocolStatus_BasicMessage `protobuf:"bytes,14,opt,name=basic_message,json=basicMessage,proto3,oneof"`
}

func (*ProtocolStatus_Connection_) isProtocolStatus_Status() {}

func (*ProtocolStatus_Issue_) isProtocolStatus_Status() {}

func (*ProtocolStatus_Proof) isProtocolStatus_Status() {}

func (*ProtocolStatus_TrustPing_) isProtocolStatus_Status() {}

func (*ProtocolStatus_BasicMessage_) isProtocolStatus_Status() {}

type Protocol_Attribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Protocol_Attribute) Reset() {
	*x = Protocol_Attribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Protocol_Attribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Protocol_Attribute) ProtoMessage() {}

func (x *Protocol_Attribute) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Protocol_Attribute.ProtoReflect.Descriptor instead.
func (*Protocol_Attribute) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Protocol_Attribute) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Protocol_Attribute) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Protocol_Attributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attrs []*Protocol_Attribute `protobuf:"bytes,1,rep,name=attrs,proto3" json:"attrs,omitempty"`
}

func (x *Protocol_Attributes) Reset() {
	*x = Protocol_Attributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Protocol_Attributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Protocol_Attributes) ProtoMessage() {}

func (x *Protocol_Attributes) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Protocol_Attributes.ProtoReflect.Descriptor instead.
func (*Protocol_Attributes) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Protocol_Attributes) GetAttrs() []*Protocol_Attribute {
	if x != nil {
		return x.Attrs
	}
	return nil
}

// Message types for each protocol typeID, see StartMsg
type Protocol_DIDExchangeMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label          string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	InvitationJson string `protobuf:"bytes,2,opt,name=invitation_json,json=invitationJson,proto3" json:"invitation_json,omitempty"` // Invitation JSON string
}

func (x *Protocol_DIDExchangeMsg) Reset() {
	*x = Protocol_DIDExchangeMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Protocol_DIDExchangeMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Protocol_DIDExchangeMsg) ProtoMessage() {}

func (x *Protocol_DIDExchangeMsg) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Protocol_DIDExchangeMsg.ProtoReflect.Descriptor instead.
func (*Protocol_DIDExchangeMsg) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Protocol_DIDExchangeMsg) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *Protocol_DIDExchangeMsg) GetInvitationJson() string {
	if x != nil {
		return x.InvitationJson
	}
	return ""
}

type Protocol_IssueCredentialMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CredDefID string `protobuf:"bytes,1,opt,name=cred_defID,json=credDefID,proto3" json:"cred_defID,omitempty"`
	// Types that are assignable to AttrFmt:
	//	*Protocol_IssueCredentialMsg_AttributesJson
	//	*Protocol_IssueCredentialMsg_Attributes
	AttrFmt isProtocol_IssueCredentialMsg_AttrFmt `protobuf_oneof:"AttrFmt"`
}

func (x *Protocol_IssueCredentialMsg) Reset() {
	*x = Protocol_IssueCredentialMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Protocol_IssueCredentialMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Protocol_IssueCredentialMsg) ProtoMessage() {}

func (x *Protocol_IssueCredentialMsg) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Protocol_IssueCredentialMsg.ProtoReflect.Descriptor instead.
func (*Protocol_IssueCredentialMsg) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Protocol_IssueCredentialMsg) GetCredDefID() string {
	if x != nil {
		return x.CredDefID
	}
	return ""
}

func (m *Protocol_IssueCredentialMsg) GetAttrFmt() isProtocol_IssueCredentialMsg_AttrFmt {
	if m != nil {
		return m.AttrFmt
	}
	return nil
}

func (x *Protocol_IssueCredentialMsg) GetAttributesJson() string {
	if x, ok := x.GetAttrFmt().(*Protocol_IssueCredentialMsg_AttributesJson); ok {
		return x.AttributesJson
	}
	return ""
}

func (x *Protocol_IssueCredentialMsg) GetAttributes() *Protocol_Attributes {
	if x, ok := x.GetAttrFmt().(*Protocol_IssueCredentialMsg_Attributes); ok {
		return x.Attributes
	}
	return nil
}

type isProtocol_IssueCredentialMsg_AttrFmt interface {
	isProtocol_IssueCredentialMsg_AttrFmt()
}

type Protocol_IssueCredentialMsg_AttributesJson struct {
	AttributesJson string `protobuf:"bytes,2,opt,name=attributes_json,json=attributesJson,proto3,oneof"`
}

type Protocol_IssueCredentialMsg_Attributes struct {
	Attributes *Protocol_Attributes `protobuf:"bytes,3,opt,name=attributes,proto3,oneof"`
}

func (*Protocol_IssueCredentialMsg_AttributesJson) isProtocol_IssueCredentialMsg_AttrFmt() {}

func (*Protocol_IssueCredentialMsg_Attributes) isProtocol_IssueCredentialMsg_AttrFmt() {}

type Protocol_Proof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attributes []*Protocol_Proof_Attribute `protobuf:"bytes,1,rep,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *Protocol_Proof) Reset() {
	*x = Protocol_Proof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Protocol_Proof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Protocol_Proof) ProtoMessage() {}

func (x *Protocol_Proof) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Protocol_Proof.ProtoReflect.Descriptor instead.
func (*Protocol_Proof) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Protocol_Proof) GetAttributes() []*Protocol_Proof_Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type Protocol_PresentProofMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to AttrFmt:
	//	*Protocol_PresentProofMsg_AttributesJson
	//	*Protocol_PresentProofMsg_Attributes
	AttrFmt isProtocol_PresentProofMsg_AttrFmt `protobuf_oneof:"AttrFmt"`
}

func (x *Protocol_PresentProofMsg) Reset() {
	*x = Protocol_PresentProofMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Protocol_PresentProofMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Protocol_PresentProofMsg) ProtoMessage() {}

func (x *Protocol_PresentProofMsg) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Protocol_PresentProofMsg.ProtoReflect.Descriptor instead.
func (*Protocol_PresentProofMsg) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{0, 5}
}

func (m *Protocol_PresentProofMsg) GetAttrFmt() isProtocol_PresentProofMsg_AttrFmt {
	if m != nil {
		return m.AttrFmt
	}
	return nil
}

func (x *Protocol_PresentProofMsg) GetAttributesJson() string {
	if x, ok := x.GetAttrFmt().(*Protocol_PresentProofMsg_AttributesJson); ok {
		return x.AttributesJson
	}
	return ""
}

func (x *Protocol_PresentProofMsg) GetAttributes() *Protocol_Proof {
	if x, ok := x.GetAttrFmt().(*Protocol_PresentProofMsg_Attributes); ok {
		return x.Attributes
	}
	return nil
}

type isProtocol_PresentProofMsg_AttrFmt interface {
	isProtocol_PresentProofMsg_AttrFmt()
}

type Protocol_PresentProofMsg_AttributesJson struct {
	AttributesJson string `protobuf:"bytes,1,opt,name=attributes_json,json=attributesJson,proto3,oneof"`
}

type Protocol_PresentProofMsg_Attributes struct {
	Attributes *Protocol_Proof `protobuf:"bytes,2,opt,name=attributes,proto3,oneof"`
}

func (*Protocol_PresentProofMsg_AttributesJson) isProtocol_PresentProofMsg_AttrFmt() {}

func (*Protocol_PresentProofMsg_Attributes) isProtocol_PresentProofMsg_AttrFmt() {}

type Protocol_BasicMessageMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *Protocol_BasicMessageMsg) Reset() {
	*x = Protocol_BasicMessageMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Protocol_BasicMessageMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Protocol_BasicMessageMsg) ProtoMessage() {}

func (x *Protocol_BasicMessageMsg) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Protocol_BasicMessageMsg.ProtoReflect.Descriptor instead.
func (*Protocol_BasicMessageMsg) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{0, 6}
}

func (x *Protocol_BasicMessageMsg) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type Protocol_Proof_Attribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CredDefID string `protobuf:"bytes,2,opt,name=cred_defID,json=credDefID,proto3" json:"cred_defID,omitempty"`
}

func (x *Protocol_Proof_Attribute) Reset() {
	*x = Protocol_Proof_Attribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Protocol_Proof_Attribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Protocol_Proof_Attribute) ProtoMessage() {}

func (x *Protocol_Proof_Attribute) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Protocol_Proof_Attribute.ProtoReflect.Descriptor instead.
func (*Protocol_Proof_Attribute) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{0, 4, 0}
}

func (x *Protocol_Proof_Attribute) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Protocol_Proof_Attribute) GetCredDefID() string {
	if x != nil {
		return x.CredDefID
	}
	return ""
}

type ProtocolStatus_Connection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	MyDid         string `protobuf:"bytes,2,opt,name=my_did,json=myDid,proto3" json:"my_did,omitempty"`
	TheirDid      string `protobuf:"bytes,3,opt,name=their_did,json=theirDid,proto3" json:"their_did,omitempty"`
	TheirEndpoint string `protobuf:"bytes,4,opt,name=their_endpoint,json=theirEndpoint,proto3" json:"their_endpoint,omitempty"`
	TheirLabel    string `protobuf:"bytes,5,opt,name=their_label,json=theirLabel,proto3" json:"their_label,omitempty"`
}

func (x *ProtocolStatus_Connection) Reset() {
	*x = ProtocolStatus_Connection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolStatus_Connection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolStatus_Connection) ProtoMessage() {}

func (x *ProtocolStatus_Connection) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolStatus_Connection.ProtoReflect.Descriptor instead.
func (*ProtocolStatus_Connection) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{3, 0}
}

func (x *ProtocolStatus_Connection) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ProtocolStatus_Connection) GetMyDid() string {
	if x != nil {
		return x.MyDid
	}
	return ""
}

func (x *ProtocolStatus_Connection) GetTheirDid() string {
	if x != nil {
		return x.TheirDid
	}
	return ""
}

func (x *ProtocolStatus_Connection) GetTheirEndpoint() string {
	if x != nil {
		return x.TheirEndpoint
	}
	return ""
}

func (x *ProtocolStatus_Connection) GetTheirLabel() string {
	if x != nil {
		return x.TheirLabel
	}
	return ""
}

type ProtocolStatus_Issue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CredDefID string                `protobuf:"bytes,1,opt,name=cred_defID,json=credDefID,proto3" json:"cred_defID,omitempty"`
	SchemaID  string                `protobuf:"bytes,2,opt,name=schemaID,proto3" json:"schemaID,omitempty"`
	Attrs     []*Protocol_Attribute `protobuf:"bytes,3,rep,name=attrs,proto3" json:"attrs,omitempty"`
}

func (x *ProtocolStatus_Issue) Reset() {
	*x = ProtocolStatus_Issue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolStatus_Issue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolStatus_Issue) ProtoMessage() {}

func (x *ProtocolStatus_Issue) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolStatus_Issue.ProtoReflect.Descriptor instead.
func (*ProtocolStatus_Issue) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{3, 1}
}

func (x *ProtocolStatus_Issue) GetCredDefID() string {
	if x != nil {
		return x.CredDefID
	}
	return ""
}

func (x *ProtocolStatus_Issue) GetSchemaID() string {
	if x != nil {
		return x.SchemaID
	}
	return ""
}

func (x *ProtocolStatus_Issue) GetAttrs() []*Protocol_Attribute {
	if x != nil {
		return x.Attrs
	}
	return nil
}

type ProtocolStatus_TrustPing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Replied bool `protobuf:"varint,1,opt,name=replied,proto3" json:"replied,omitempty"`
}

func (x *ProtocolStatus_TrustPing) Reset() {
	*x = ProtocolStatus_TrustPing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolStatus_TrustPing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolStatus_TrustPing) ProtoMessage() {}

func (x *ProtocolStatus_TrustPing) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolStatus_TrustPing.ProtoReflect.Descriptor instead.
func (*ProtocolStatus_TrustPing) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{3, 2}
}

func (x *ProtocolStatus_TrustPing) GetReplied() bool {
	if x != nil {
		return x.Replied
	}
	return false
}

type ProtocolStatus_BasicMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content       string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	SentByMe      bool   `protobuf:"varint,2,opt,name=sent_by_me,json=sentByMe,proto3" json:"sent_by_me,omitempty"`
	Delivered     bool   `protobuf:"varint,3,opt,name=delivered,proto3" json:"delivered,omitempty"`
	SentTimestamp int64  `protobuf:"varint,4,opt,name=sent_timestamp,json=sentTimestamp,proto3" json:"sent_timestamp,omitempty"`
}

func (x *ProtocolStatus_BasicMessage) Reset() {
	*x = ProtocolStatus_BasicMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolStatus_BasicMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolStatus_BasicMessage) ProtoMessage() {}

func (x *ProtocolStatus_BasicMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolStatus_BasicMessage.ProtoReflect.Descriptor instead.
func (*ProtocolStatus_BasicMessage) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{3, 3}
}

func (x *ProtocolStatus_BasicMessage) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ProtocolStatus_BasicMessage) GetSentByMe() bool {
	if x != nil {
		return x.SentByMe
	}
	return false
}

func (x *ProtocolStatus_BasicMessage) GetDelivered() bool {
	if x != nil {
		return x.Delivered
	}
	return false
}

func (x *ProtocolStatus_BasicMessage) GetSentTimestamp() int64 {
	if x != nil {
		return x.SentTimestamp
	}
	return 0
}

var File_protocol_proto protoreflect.FileDescriptor

var file_protocol_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x22, 0xda, 0x0a, 0x0a, 0x08,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x30, 0x0a, 0x06, 0x74, 0x79, 0x70, 0x65,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x6f,
	0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x76,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x72, 0x65, 0x76, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x44, 0x12, 0x22, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x47, 0x0a, 0x0c, 0x44, 0x49, 0x44, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x49, 0x44,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x0b, 0x44,
	0x49, 0x44, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x53, 0x0a, 0x10, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x0f,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12,
	0x4a, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x0c, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x4a, 0x0a, 0x0d, 0x62,
	0x61, 0x73, 0x69, 0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x69, 0x63,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x35, 0x0a, 0x09, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x41,
	0x0a, 0x0a, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x05,
	0x61, 0x74, 0x74, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x05, 0x61, 0x74, 0x74, 0x72,
	0x73, 0x1a, 0x4f, 0x0a, 0x0e, 0x44, 0x49, 0x44, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x73,
	0x6f, 0x6e, 0x1a, 0xab, 0x01, 0x0a, 0x12, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x73, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x64, 0x5f, 0x64, 0x65, 0x66, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x64, 0x44, 0x65, 0x66, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x0f, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x4a,
	0x73, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x41, 0x74, 0x74, 0x72, 0x46, 0x6d, 0x74,
	0x1a, 0x8c, 0x01, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x43, 0x0a, 0x0a, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a,
	0x3e, 0x0a, 0x09, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x66, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x64, 0x44, 0x65, 0x66, 0x49, 0x44, 0x1a,
	0x84, 0x01, 0x0a, 0x0f, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x4d, 0x73, 0x67, 0x12, 0x29, 0x0a, 0x0f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x3b,
	0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x48, 0x00, 0x52,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x41,
	0x74, 0x74, 0x72, 0x46, 0x6d, 0x74, 0x1a, 0x25, 0x0a, 0x0f, 0x42, 0x61, 0x73, 0x69, 0x63, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x6d, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x44, 0x49, 0x44, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x01,
	0x12, 0x14, 0x0a, 0x10, 0x49, 0x53, 0x53, 0x55, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x45, 0x4e,
	0x54, 0x49, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e,
	0x54, 0x5f, 0x50, 0x52, 0x4f, 0x4f, 0x46, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x52, 0x55,
	0x53, 0x54, 0x5f, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x41, 0x53,
	0x49, 0x43, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x05, 0x22, 0x3e, 0x0a, 0x04,
	0x52, 0x6f, 0x6c, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x45, 0x45, 0x10, 0x02, 0x12,
	0x0b, 0x0a, 0x07, 0x52, 0x45, 0x53, 0x55, 0x4d, 0x45, 0x52, 0x10, 0x03, 0x42, 0x0a, 0x0a, 0x08,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x73, 0x67, 0x22, 0xa9, 0x01, 0x0a, 0x0a, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x6f, 0x6c,
	0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0xdb, 0x01, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49,
	0x44, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x44, 0x12, 0x34, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x49, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x06, 0x0a,
	0x02, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x52, 0x52, 0x10, 0x02, 0x12, 0x0f,
	0x0a, 0x0b, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12,
	0x07, 0x0a, 0x03, 0x41, 0x43, 0x4b, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x41, 0x43, 0x4b,
	0x10, 0x05, 0x22, 0x9b, 0x07, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6a, 0x73,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x05,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x48, 0x00, 0x52, 0x05,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x48,
	0x00, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x44, 0x0a, 0x0a, 0x74, 0x72, 0x75, 0x73,
	0x74, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x50, 0x69, 0x6e,
	0x67, 0x48, 0x00, 0x52, 0x09, 0x74, 0x72, 0x75, 0x73, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x4d,
	0x0a, 0x0d, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x0c, 0x62, 0x61, 0x73, 0x69, 0x63, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x98, 0x01,
	0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x15, 0x0a, 0x06,
	0x6d, 0x79, 0x5f, 0x64, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x79,
	0x44, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x68, 0x65, 0x69, 0x72, 0x5f, 0x64, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x68, 0x65, 0x69, 0x72, 0x44, 0x69, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x74, 0x68, 0x65, 0x69, 0x72, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x68, 0x65, 0x69, 0x72, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x68, 0x65, 0x69, 0x72,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x68,
	0x65, 0x69, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x1a, 0x77, 0x0a, 0x05, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x66, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x64, 0x44, 0x65, 0x66, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x44, 0x12, 0x33, 0x0a, 0x05,
	0x61, 0x74, 0x74, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x05, 0x61, 0x74, 0x74, 0x72,
	0x73, 0x1a, 0x25, 0x0a, 0x09, 0x54, 0x72, 0x75, 0x73, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x1a, 0x8b, 0x01, 0x0a, 0x0c, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x4d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x32, 0xb8, 0x02, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x03, 0x52, 0x75, 0x6e, 0x12, 0x13, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x1a, 0x18, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x35,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x13, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x1a, 0x15, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x49, 0x44, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x15, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x44, 0x1a, 0x19, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x12, 0x18, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x15, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x44, 0x22, 0x00,
	0x12, 0x39, 0x0a, 0x07, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x15, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x49, 0x44, 0x1a, 0x15, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x44, 0x22, 0x00, 0x42, 0x39, 0x5a, 0x37, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x69, 0x6e, 0x64, 0x79, 0x2d,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x66, 0x69, 0x6e, 0x64, 0x79, 0x2d, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x61, 0x67, 0x65,
	0x6e, 0x63, 0x79, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protocol_proto_rawDescOnce sync.Once
	file_protocol_proto_rawDescData = file_protocol_proto_rawDesc
)

func file_protocol_proto_rawDescGZIP() []byte {
	file_protocol_proto_rawDescOnce.Do(func() {
		file_protocol_proto_rawDescData = protoimpl.X.CompressGZIP(file_protocol_proto_rawDescData)
	})
	return file_protocol_proto_rawDescData
}

var file_protocol_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_protocol_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_protocol_proto_goTypes = []interface{}{
	(Protocol_Type)(0),                  // 0: agency.v1.Protocol.Type
	(Protocol_Role)(0),                  // 1: agency.v1.Protocol.Role
	(ProtocolState_State)(0),            // 2: agency.v1.ProtocolState.State
	(*Protocol)(nil),                    // 3: agency.v1.Protocol
	(*ProtocolID)(nil),                  // 4: agency.v1.ProtocolID
	(*ProtocolState)(nil),               // 5: agency.v1.ProtocolState
	(*ProtocolStatus)(nil),              // 6: agency.v1.ProtocolStatus
	(*Protocol_Attribute)(nil),          // 7: agency.v1.Protocol.Attribute
	(*Protocol_Attributes)(nil),         // 8: agency.v1.Protocol.Attributes
	(*Protocol_DIDExchangeMsg)(nil),     // 9: agency.v1.Protocol.DIDExchangeMsg
	(*Protocol_IssueCredentialMsg)(nil), // 10: agency.v1.Protocol.IssueCredentialMsg
	(*Protocol_Proof)(nil),              // 11: agency.v1.Protocol.Proof
	(*Protocol_PresentProofMsg)(nil),    // 12: agency.v1.Protocol.PresentProofMsg
	(*Protocol_BasicMessageMsg)(nil),    // 13: agency.v1.Protocol.BasicMessageMsg
	(*Protocol_Proof_Attribute)(nil),    // 14: agency.v1.Protocol.Proof.Attribute
	(*ProtocolStatus_Connection)(nil),   // 15: agency.v1.ProtocolStatus.Connection
	(*ProtocolStatus_Issue)(nil),        // 16: agency.v1.ProtocolStatus.Issue
	(*ProtocolStatus_TrustPing)(nil),    // 17: agency.v1.ProtocolStatus.TrustPing
	(*ProtocolStatus_BasicMessage)(nil), // 18: agency.v1.ProtocolStatus.BasicMessage
}
var file_protocol_proto_depIdxs = []int32{
	0,  // 0: agency.v1.Protocol.typeID:type_name -> agency.v1.Protocol.Type
	1,  // 1: agency.v1.Protocol.role:type_name -> agency.v1.Protocol.Role
	9,  // 2: agency.v1.Protocol.DID_exchange:type_name -> agency.v1.Protocol.DIDExchangeMsg
	10, // 3: agency.v1.Protocol.issue_credential:type_name -> agency.v1.Protocol.IssueCredentialMsg
	12, // 4: agency.v1.Protocol.present_proof:type_name -> agency.v1.Protocol.PresentProofMsg
	13, // 5: agency.v1.Protocol.basic_message:type_name -> agency.v1.Protocol.BasicMessageMsg
	0,  // 6: agency.v1.ProtocolID.typeID:type_name -> agency.v1.Protocol.Type
	1,  // 7: agency.v1.ProtocolID.role:type_name -> agency.v1.Protocol.Role
	4,  // 8: agency.v1.ProtocolState.protocolID:type_name -> agency.v1.ProtocolID
	2,  // 9: agency.v1.ProtocolState.state:type_name -> agency.v1.ProtocolState.State
	5,  // 10: agency.v1.ProtocolStatus.state:type_name -> agency.v1.ProtocolState
	15, // 11: agency.v1.ProtocolStatus.connection:type_name -> agency.v1.ProtocolStatus.Connection
	16, // 12: agency.v1.ProtocolStatus.issue:type_name -> agency.v1.ProtocolStatus.Issue
	11, // 13: agency.v1.ProtocolStatus.proof:type_name -> agency.v1.Protocol.Proof
	17, // 14: agency.v1.ProtocolStatus.trust_ping:type_name -> agency.v1.ProtocolStatus.TrustPing
	18, // 15: agency.v1.ProtocolStatus.basic_message:type_name -> agency.v1.ProtocolStatus.BasicMessage
	7,  // 16: agency.v1.Protocol.Attributes.attrs:type_name -> agency.v1.Protocol.Attribute
	8,  // 17: agency.v1.Protocol.IssueCredentialMsg.attributes:type_name -> agency.v1.Protocol.Attributes
	14, // 18: agency.v1.Protocol.Proof.attributes:type_name -> agency.v1.Protocol.Proof.Attribute
	11, // 19: agency.v1.Protocol.PresentProofMsg.attributes:type_name -> agency.v1.Protocol.Proof
	7,  // 20: agency.v1.ProtocolStatus.Issue.attrs:type_name -> agency.v1.Protocol.Attribute
	3,  // 21: agency.v1.ProtocolService.Run:input_type -> agency.v1.Protocol
	3,  // 22: agency.v1.ProtocolService.Start:input_type -> agency.v1.Protocol
	4,  // 23: agency.v1.ProtocolService.Status:input_type -> agency.v1.ProtocolID
	5,  // 24: agency.v1.ProtocolService.Resume:input_type -> agency.v1.ProtocolState
	4,  // 25: agency.v1.ProtocolService.Release:input_type -> agency.v1.ProtocolID
	5,  // 26: agency.v1.ProtocolService.Run:output_type -> agency.v1.ProtocolState
	4,  // 27: agency.v1.ProtocolService.Start:output_type -> agency.v1.ProtocolID
	6,  // 28: agency.v1.ProtocolService.Status:output_type -> agency.v1.ProtocolStatus
	4,  // 29: agency.v1.ProtocolService.Resume:output_type -> agency.v1.ProtocolID
	4,  // 30: agency.v1.ProtocolService.Release:output_type -> agency.v1.ProtocolID
	26, // [26:31] is the sub-list for method output_type
	21, // [21:26] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_protocol_proto_init() }
func file_protocol_proto_init() {
	if File_protocol_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protocol_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Protocol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Protocol_Attribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Protocol_Attributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Protocol_DIDExchangeMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Protocol_IssueCredentialMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Protocol_Proof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Protocol_PresentProofMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Protocol_BasicMessageMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Protocol_Proof_Attribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolStatus_Connection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolStatus_Issue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolStatus_TrustPing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolStatus_BasicMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protocol_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Protocol_DIDExchange)(nil),
		(*Protocol_IssueCredential)(nil),
		(*Protocol_PresentProof)(nil),
		(*Protocol_BasicMessage)(nil),
	}
	file_protocol_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*ProtocolStatus_Connection_)(nil),
		(*ProtocolStatus_Issue_)(nil),
		(*ProtocolStatus_Proof)(nil),
		(*ProtocolStatus_TrustPing_)(nil),
		(*ProtocolStatus_BasicMessage_)(nil),
	}
	file_protocol_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*Protocol_IssueCredentialMsg_AttributesJson)(nil),
		(*Protocol_IssueCredentialMsg_Attributes)(nil),
	}
	file_protocol_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*Protocol_PresentProofMsg_AttributesJson)(nil),
		(*Protocol_PresentProofMsg_Attributes)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protocol_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protocol_proto_goTypes,
		DependencyIndexes: file_protocol_proto_depIdxs,
		EnumInfos:         file_protocol_proto_enumTypes,
		MessageInfos:      file_protocol_proto_msgTypes,
	}.Build()
	File_protocol_proto = out.File
	file_protocol_proto_rawDesc = nil
	file_protocol_proto_goTypes = nil
	file_protocol_proto_depIdxs = nil
}
