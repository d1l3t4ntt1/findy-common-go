// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AgencyServiceClient is the client API for AgencyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgencyServiceClient interface {
	// PSMHook listens realtime stream of archived protocol state machines
	PSMHook(ctx context.Context, in *DataHook, opts ...grpc.CallOption) (AgencyService_PSMHookClient, error)
	// Onboard allocates cloud agent and its wallet from Agency
	Onboard(ctx context.Context, in *Onboarding, opts ...grpc.CallOption) (*OnboardResult, error)
}

type agencyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAgencyServiceClient(cc grpc.ClientConnInterface) AgencyServiceClient {
	return &agencyServiceClient{cc}
}

func (c *agencyServiceClient) PSMHook(ctx context.Context, in *DataHook, opts ...grpc.CallOption) (AgencyService_PSMHookClient, error) {
	stream, err := c.cc.NewStream(ctx, &AgencyService_ServiceDesc.Streams[0], "/ops.v1.AgencyService/PSMHook", opts...)
	if err != nil {
		return nil, err
	}
	x := &agencyServicePSMHookClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AgencyService_PSMHookClient interface {
	Recv() (*AgencyStatus, error)
	grpc.ClientStream
}

type agencyServicePSMHookClient struct {
	grpc.ClientStream
}

func (x *agencyServicePSMHookClient) Recv() (*AgencyStatus, error) {
	m := new(AgencyStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agencyServiceClient) Onboard(ctx context.Context, in *Onboarding, opts ...grpc.CallOption) (*OnboardResult, error) {
	out := new(OnboardResult)
	err := c.cc.Invoke(ctx, "/ops.v1.AgencyService/Onboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgencyServiceServer is the server API for AgencyService service.
// All implementations must embed UnimplementedAgencyServiceServer
// for forward compatibility
type AgencyServiceServer interface {
	// PSMHook listens realtime stream of archived protocol state machines
	PSMHook(*DataHook, AgencyService_PSMHookServer) error
	// Onboard allocates cloud agent and its wallet from Agency
	Onboard(context.Context, *Onboarding) (*OnboardResult, error)
	mustEmbedUnimplementedAgencyServiceServer()
}

// UnimplementedAgencyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAgencyServiceServer struct {
}

func (UnimplementedAgencyServiceServer) PSMHook(*DataHook, AgencyService_PSMHookServer) error {
	return status.Errorf(codes.Unimplemented, "method PSMHook not implemented")
}
func (UnimplementedAgencyServiceServer) Onboard(context.Context, *Onboarding) (*OnboardResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Onboard not implemented")
}
func (UnimplementedAgencyServiceServer) mustEmbedUnimplementedAgencyServiceServer() {}

// UnsafeAgencyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgencyServiceServer will
// result in compilation errors.
type UnsafeAgencyServiceServer interface {
	mustEmbedUnimplementedAgencyServiceServer()
}

func RegisterAgencyServiceServer(s grpc.ServiceRegistrar, srv AgencyServiceServer) {
	s.RegisterService(&AgencyService_ServiceDesc, srv)
}

func _AgencyService_PSMHook_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DataHook)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgencyServiceServer).PSMHook(m, &agencyServicePSMHookServer{stream})
}

type AgencyService_PSMHookServer interface {
	Send(*AgencyStatus) error
	grpc.ServerStream
}

type agencyServicePSMHookServer struct {
	grpc.ServerStream
}

func (x *agencyServicePSMHookServer) Send(m *AgencyStatus) error {
	return x.ServerStream.SendMsg(m)
}

func _AgencyService_Onboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Onboarding)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgencyServiceServer).Onboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ops.v1.AgencyService/Onboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgencyServiceServer).Onboard(ctx, req.(*Onboarding))
	}
	return interceptor(ctx, in, info, handler)
}

// AgencyService_ServiceDesc is the grpc.ServiceDesc for AgencyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgencyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ops.v1.AgencyService",
	HandlerType: (*AgencyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Onboard",
			Handler:    _AgencyService_Onboard_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PSMHook",
			Handler:       _AgencyService_PSMHook_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "agency.proto",
}

// DevOpsServiceClient is the client API for DevOpsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DevOpsServiceClient interface {
	// Enter is the cmd exec interface.
	Enter(ctx context.Context, in *Cmd, opts ...grpc.CallOption) (*CmdReturn, error)
}

type devOpsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDevOpsServiceClient(cc grpc.ClientConnInterface) DevOpsServiceClient {
	return &devOpsServiceClient{cc}
}

func (c *devOpsServiceClient) Enter(ctx context.Context, in *Cmd, opts ...grpc.CallOption) (*CmdReturn, error) {
	out := new(CmdReturn)
	err := c.cc.Invoke(ctx, "/ops.v1.DevOpsService/Enter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DevOpsServiceServer is the server API for DevOpsService service.
// All implementations must embed UnimplementedDevOpsServiceServer
// for forward compatibility
type DevOpsServiceServer interface {
	// Enter is the cmd exec interface.
	Enter(context.Context, *Cmd) (*CmdReturn, error)
	mustEmbedUnimplementedDevOpsServiceServer()
}

// UnimplementedDevOpsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDevOpsServiceServer struct {
}

func (UnimplementedDevOpsServiceServer) Enter(context.Context, *Cmd) (*CmdReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enter not implemented")
}
func (UnimplementedDevOpsServiceServer) mustEmbedUnimplementedDevOpsServiceServer() {}

// UnsafeDevOpsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DevOpsServiceServer will
// result in compilation errors.
type UnsafeDevOpsServiceServer interface {
	mustEmbedUnimplementedDevOpsServiceServer()
}

func RegisterDevOpsServiceServer(s grpc.ServiceRegistrar, srv DevOpsServiceServer) {
	s.RegisterService(&DevOpsService_ServiceDesc, srv)
}

func _DevOpsService_Enter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cmd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevOpsServiceServer).Enter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ops.v1.DevOpsService/Enter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevOpsServiceServer).Enter(ctx, req.(*Cmd))
	}
	return interceptor(ctx, in, info, handler)
}

// DevOpsService_ServiceDesc is the grpc.ServiceDesc for DevOpsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DevOpsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ops.v1.DevOpsService",
	HandlerType: (*DevOpsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Enter",
			Handler:    _DevOpsService_Enter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agency.proto",
}
