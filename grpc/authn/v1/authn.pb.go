// Copyright 2023 Harri @ OP Techlab.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: authn.proto

// Package authn.v1 is the first version of findy gRPC API. As long as we'll not
// have changes that aren't backward compatible, we can just update the API.
// The gRPC itself will take care off that, like adding a new fields to
// messages. We just need to follow the gRPC practises and rules.
//
// As said, as long as we can maintain backward compatibility, we are working
// with version 1.0.  The version 2.0 will be introduced when we cannot solve
// something only with the version 1.0. The 2.0 will include all the current
// APIs of 1.0 and we support them both together until the decision shall be
// made to depracate 1.0 totally. The deprecation rules will be specified
// later.

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SecretMsg_Type int32

const (
	SecretMsg_ERROR SecretMsg_Type = 0 // Error in processing CmdStatus
	// Enclave lvl status. TODO: should we have IDs for enclaves?
	SecretMsg_NEW_HANDLE    SecretMsg_Type = 1 // () -> key handle ID (int64)
	SecretMsg_IS_KEY_HANDLE SecretMsg_Type = 2 // (credID bytes) -> bool
	// Handle lvl status
	SecretMsg_ID           SecretMsg_Type = 3 // handle_id -> bytes
	SecretMsg_CBOR_PUB_KEY SecretMsg_Type = 4 // handle_id -> bytes
	SecretMsg_SIGN         SecretMsg_Type = 5 // handle_id (bytes) -> bytes
	SecretMsg_VERIFY       SecretMsg_Type = 6 // handle_id (bytes, bytes) -> bool
)

// Enum value maps for SecretMsg_Type.
var (
	SecretMsg_Type_name = map[int32]string{
		0: "ERROR",
		1: "NEW_HANDLE",
		2: "IS_KEY_HANDLE",
		3: "ID",
		4: "CBOR_PUB_KEY",
		5: "SIGN",
		6: "VERIFY",
	}
	SecretMsg_Type_value = map[string]int32{
		"ERROR":         0,
		"NEW_HANDLE":    1,
		"IS_KEY_HANDLE": 2,
		"ID":            3,
		"CBOR_PUB_KEY":  4,
		"SIGN":          5,
		"VERIFY":        6,
	}
)

func (x SecretMsg_Type) Enum() *SecretMsg_Type {
	p := new(SecretMsg_Type)
	*p = x
	return p
}

func (x SecretMsg_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SecretMsg_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_authn_proto_enumTypes[0].Descriptor()
}

func (SecretMsg_Type) Type() protoreflect.EnumType {
	return &file_authn_proto_enumTypes[0]
}

func (x SecretMsg_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SecretMsg_Type.Descriptor instead.
func (SecretMsg_Type) EnumDescriptor() ([]byte, []int) {
	return file_authn_proto_rawDescGZIP(), []int{0, 0}
}

type Cmd_Type int32

const (
	Cmd_LOGIN    Cmd_Type = 0
	Cmd_REGISTER Cmd_Type = 1
)

// Enum value maps for Cmd_Type.
var (
	Cmd_Type_name = map[int32]string{
		0: "LOGIN",
		1: "REGISTER",
	}
	Cmd_Type_value = map[string]int32{
		"LOGIN":    0,
		"REGISTER": 1,
	}
)

func (x Cmd_Type) Enum() *Cmd_Type {
	p := new(Cmd_Type)
	*p = x
	return p
}

func (x Cmd_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Cmd_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_authn_proto_enumTypes[1].Descriptor()
}

func (Cmd_Type) Type() protoreflect.EnumType {
	return &file_authn_proto_enumTypes[1]
}

func (x Cmd_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Cmd_Type.Descriptor instead.
func (Cmd_Type) EnumDescriptor() ([]byte, []int) {
	return file_authn_proto_rawDescGZIP(), []int{2, 0}
}

type CmdStatus_Type int32

const (
	CmdStatus_STATUS    CmdStatus_Type = 0
	CmdStatus_READY_OK  CmdStatus_Type = 1
	CmdStatus_READY_ERR CmdStatus_Type = 2
)

// Enum value maps for CmdStatus_Type.
var (
	CmdStatus_Type_name = map[int32]string{
		0: "STATUS",
		1: "READY_OK",
		2: "READY_ERR",
	}
	CmdStatus_Type_value = map[string]int32{
		"STATUS":    0,
		"READY_OK":  1,
		"READY_ERR": 2,
	}
)

func (x CmdStatus_Type) Enum() *CmdStatus_Type {
	p := new(CmdStatus_Type)
	*p = x
	return p
}

func (x CmdStatus_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CmdStatus_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_authn_proto_enumTypes[2].Descriptor()
}

func (CmdStatus_Type) Type() protoreflect.EnumType {
	return &file_authn_proto_enumTypes[2]
}

func (x CmdStatus_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CmdStatus_Type.Descriptor instead.
func (CmdStatus_Type) EnumDescriptor() ([]byte, []int) {
	return file_authn_proto_rawDescGZIP(), []int{3, 0}
}

// SecretMsg is structure identify data hook.
type SecretMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CmdID int64          `protobuf:"varint,1,opt,name=cmdID,proto3" json:"cmdID,omitempty"` // UUID to uniquely identify the hook
	Type  SecretMsg_Type `protobuf:"varint,2,opt,name=type,proto3,enum=authn.v1.SecretMsg_Type" json:"type,omitempty"`
	// Types that are assignable to Info:
	//
	//	*SecretMsg_Err
	//	*SecretMsg_Enclave_
	//	*SecretMsg_Handle_
	Info isSecretMsg_Info `protobuf_oneof:"Info"`
}

func (x *SecretMsg) Reset() {
	*x = SecretMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authn_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretMsg) ProtoMessage() {}

func (x *SecretMsg) ProtoReflect() protoreflect.Message {
	mi := &file_authn_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretMsg.ProtoReflect.Descriptor instead.
func (*SecretMsg) Descriptor() ([]byte, []int) {
	return file_authn_proto_rawDescGZIP(), []int{0}
}

func (x *SecretMsg) GetCmdID() int64 {
	if x != nil {
		return x.CmdID
	}
	return 0
}

func (x *SecretMsg) GetType() SecretMsg_Type {
	if x != nil {
		return x.Type
	}
	return SecretMsg_ERROR
}

func (m *SecretMsg) GetInfo() isSecretMsg_Info {
	if m != nil {
		return m.Info
	}
	return nil
}

func (x *SecretMsg) GetErr() *SecretMsg_Error {
	if x, ok := x.GetInfo().(*SecretMsg_Err); ok {
		return x.Err
	}
	return nil
}

func (x *SecretMsg) GetEnclave() *SecretMsg_Enclave {
	if x, ok := x.GetInfo().(*SecretMsg_Enclave_); ok {
		return x.Enclave
	}
	return nil
}

func (x *SecretMsg) GetHandle() *SecretMsg_Handle {
	if x, ok := x.GetInfo().(*SecretMsg_Handle_); ok {
		return x.Handle
	}
	return nil
}

type isSecretMsg_Info interface {
	isSecretMsg_Info()
}

type SecretMsg_Err struct {
	Err *SecretMsg_Error `protobuf:"bytes,3,opt,name=err,proto3,oneof"`
}

type SecretMsg_Enclave_ struct {
	Enclave *SecretMsg_Enclave `protobuf:"bytes,4,opt,name=enclave,proto3,oneof"`
}

type SecretMsg_Handle_ struct {
	Handle *SecretMsg_Handle `protobuf:"bytes,5,opt,name=handle,proto3,oneof"`
}

func (*SecretMsg_Err) isSecretMsg_Info() {}

func (*SecretMsg_Enclave_) isSecretMsg_Info() {}

func (*SecretMsg_Handle_) isSecretMsg_Info() {}

// SecretResult is message to return EnterSecret results.
type SecretResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok     bool   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`        // result if Loging was successful.
	Result string `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"` // Instance of the OK result.
}

func (x *SecretResult) Reset() {
	*x = SecretResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authn_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretResult) ProtoMessage() {}

func (x *SecretResult) ProtoReflect() protoreflect.Message {
	mi := &file_authn_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretResult.ProtoReflect.Descriptor instead.
func (*SecretResult) Descriptor() ([]byte, []int) {
	return file_authn_proto_rawDescGZIP(), []int{1}
}

func (x *SecretResult) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *SecretResult) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

type Cmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type          Cmd_Type `protobuf:"varint,1,opt,name=type,proto3,enum=authn.v1.Cmd_Type" json:"type,omitempty"`
	UserName      string   `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"`
	PublicDIDSeed string   `protobuf:"bytes,3,opt,name=publicDIDSeed,proto3" json:"publicDIDSeed,omitempty"`
	URL           string   `protobuf:"bytes,4,opt,name=URL,proto3" json:"URL,omitempty"`
	AAGUID        string   `protobuf:"bytes,5,opt,name=AAGUID,proto3" json:"AAGUID,omitempty"`
	Counter       uint64   `protobuf:"varint,7,opt,name=counter,proto3" json:"counter,omitempty"`
	JWT           string   `protobuf:"bytes,8,opt,name=JWT,proto3" json:"JWT,omitempty"`
	Origin        string   `protobuf:"bytes,9,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *Cmd) Reset() {
	*x = Cmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authn_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cmd) ProtoMessage() {}

func (x *Cmd) ProtoReflect() protoreflect.Message {
	mi := &file_authn_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cmd.ProtoReflect.Descriptor instead.
func (*Cmd) Descriptor() ([]byte, []int) {
	return file_authn_proto_rawDescGZIP(), []int{2}
}

func (x *Cmd) GetType() Cmd_Type {
	if x != nil {
		return x.Type
	}
	return Cmd_LOGIN
}

func (x *Cmd) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *Cmd) GetPublicDIDSeed() string {
	if x != nil {
		return x.PublicDIDSeed
	}
	return ""
}

func (x *Cmd) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

func (x *Cmd) GetAAGUID() string {
	if x != nil {
		return x.AAGUID
	}
	return ""
}

func (x *Cmd) GetCounter() uint64 {
	if x != nil {
		return x.Counter
	}
	return 0
}

func (x *Cmd) GetJWT() string {
	if x != nil {
		return x.JWT
	}
	return ""
}

func (x *Cmd) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

// CmdStatus is structure to return cmd statuses.
type CmdStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CmdID   int64          `protobuf:"varint,1,opt,name=cmdID,proto3" json:"cmdID,omitempty"`
	Type    CmdStatus_Type `protobuf:"varint,2,opt,name=type,proto3,enum=authn.v1.CmdStatus_Type" json:"type,omitempty"`
	CmdType Cmd_Type       `protobuf:"varint,3,opt,name=cmd_type,json=cmdType,proto3,enum=authn.v1.Cmd_Type" json:"cmd_type,omitempty"`
	SecType SecretMsg_Type `protobuf:"varint,4,opt,name=sec_type,json=secType,proto3,enum=authn.v1.SecretMsg_Type" json:"sec_type,omitempty"`
	//	message Err_result _result _result _result _result _result _result _result _result _result _result _result _result _result _result Result {
	//	  string err = 1;
	//	}
	//
	// Types that are assignable to Info:
	//
	//	*CmdStatus_Enclave
	//	*CmdStatus_Handle
	//	*CmdStatus_Ok
	//	*CmdStatus_Err
	Info isCmdStatus_Info `protobuf_oneof:"Info"`
}

func (x *CmdStatus) Reset() {
	*x = CmdStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authn_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdStatus) ProtoMessage() {}

func (x *CmdStatus) ProtoReflect() protoreflect.Message {
	mi := &file_authn_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdStatus.ProtoReflect.Descriptor instead.
func (*CmdStatus) Descriptor() ([]byte, []int) {
	return file_authn_proto_rawDescGZIP(), []int{3}
}

func (x *CmdStatus) GetCmdID() int64 {
	if x != nil {
		return x.CmdID
	}
	return 0
}

func (x *CmdStatus) GetType() CmdStatus_Type {
	if x != nil {
		return x.Type
	}
	return CmdStatus_STATUS
}

func (x *CmdStatus) GetCmdType() Cmd_Type {
	if x != nil {
		return x.CmdType
	}
	return Cmd_LOGIN
}

func (x *CmdStatus) GetSecType() SecretMsg_Type {
	if x != nil {
		return x.SecType
	}
	return SecretMsg_ERROR
}

func (m *CmdStatus) GetInfo() isCmdStatus_Info {
	if m != nil {
		return m.Info
	}
	return nil
}

func (x *CmdStatus) GetEnclave() *SecretMsg_Enclave {
	if x, ok := x.GetInfo().(*CmdStatus_Enclave); ok {
		return x.Enclave
	}
	return nil
}

func (x *CmdStatus) GetHandle() *SecretMsg_Handle {
	if x, ok := x.GetInfo().(*CmdStatus_Handle); ok {
		return x.Handle
	}
	return nil
}

func (x *CmdStatus) GetOk() *CmdStatus_OKResult {
	if x, ok := x.GetInfo().(*CmdStatus_Ok); ok {
		return x.Ok
	}
	return nil
}

func (x *CmdStatus) GetErr() string {
	if x, ok := x.GetInfo().(*CmdStatus_Err); ok {
		return x.Err
	}
	return ""
}

type isCmdStatus_Info interface {
	isCmdStatus_Info()
}

type CmdStatus_Enclave struct {
	Enclave *SecretMsg_Enclave `protobuf:"bytes,5,opt,name=enclave,proto3,oneof"`
}

type CmdStatus_Handle struct {
	Handle *SecretMsg_Handle `protobuf:"bytes,6,opt,name=handle,proto3,oneof"`
}

type CmdStatus_Ok struct {
	Ok *CmdStatus_OKResult `protobuf:"bytes,7,opt,name=ok,proto3,oneof"`
}

type CmdStatus_Err struct {
	Err string `protobuf:"bytes,8,opt,name=err,proto3,oneof"`
}

func (*CmdStatus_Enclave) isCmdStatus_Info() {}

func (*CmdStatus_Handle) isCmdStatus_Info() {}

func (*CmdStatus_Ok) isCmdStatus_Info() {}

func (*CmdStatus_Err) isCmdStatus_Info() {}

type SecretMsg_Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info string `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *SecretMsg_Error) Reset() {
	*x = SecretMsg_Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authn_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretMsg_Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretMsg_Error) ProtoMessage() {}

func (x *SecretMsg_Error) ProtoReflect() protoreflect.Message {
	mi := &file_authn_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretMsg_Error.ProtoReflect.Descriptor instead.
func (*SecretMsg_Error) Descriptor() ([]byte, []int) {
	return file_authn_proto_rawDescGZIP(), []int{0, 0}
}

func (x *SecretMsg_Error) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

type SecretMsg_Enclave struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CredID []byte `protobuf:"bytes,1,opt,name=credID,proto3" json:"credID,omitempty"`
}

func (x *SecretMsg_Enclave) Reset() {
	*x = SecretMsg_Enclave{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authn_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretMsg_Enclave) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretMsg_Enclave) ProtoMessage() {}

func (x *SecretMsg_Enclave) ProtoReflect() protoreflect.Message {
	mi := &file_authn_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretMsg_Enclave.ProtoReflect.Descriptor instead.
func (*SecretMsg_Enclave) Descriptor() ([]byte, []int) {
	return file_authn_proto_rawDescGZIP(), []int{0, 1}
}

func (x *SecretMsg_Enclave) GetCredID() []byte {
	if x != nil {
		return x.CredID
	}
	return nil
}

type SecretMsg_Handle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID   int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Sign []byte `protobuf:"bytes,3,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (x *SecretMsg_Handle) Reset() {
	*x = SecretMsg_Handle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authn_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretMsg_Handle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretMsg_Handle) ProtoMessage() {}

func (x *SecretMsg_Handle) ProtoReflect() protoreflect.Message {
	mi := &file_authn_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretMsg_Handle.ProtoReflect.Descriptor instead.
func (*SecretMsg_Handle) Descriptor() ([]byte, []int) {
	return file_authn_proto_rawDescGZIP(), []int{0, 2}
}

func (x *SecretMsg_Handle) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *SecretMsg_Handle) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SecretMsg_Handle) GetSign() []byte {
	if x != nil {
		return x.Sign
	}
	return nil
}

type CmdStatus_OKResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JWT string `protobuf:"bytes,1,opt,name=JWT,proto3" json:"JWT,omitempty"` // pregenerated JWT token, mostly usefull for development.
}

func (x *CmdStatus_OKResult) Reset() {
	*x = CmdStatus_OKResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authn_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdStatus_OKResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdStatus_OKResult) ProtoMessage() {}

func (x *CmdStatus_OKResult) ProtoReflect() protoreflect.Message {
	mi := &file_authn_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdStatus_OKResult.ProtoReflect.Descriptor instead.
func (*CmdStatus_OKResult) Descriptor() ([]byte, []int) {
	return file_authn_proto_rawDescGZIP(), []int{3, 0}
}

func (x *CmdStatus_OKResult) GetJWT() string {
	if x != nil {
		return x.JWT
	}
	return ""
}

var File_authn_proto protoreflect.FileDescriptor

var file_authn_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x61,
	0x75, 0x74, 0x68, 0x6e, 0x2e, 0x76, 0x31, 0x22, 0xdd, 0x03, 0x0a, 0x09, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6d, 0x64, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6d, 0x64, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x03, 0x65, 0x72, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x48, 0x00, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x37, 0x0a, 0x07, 0x65, 0x6e, 0x63, 0x6c,
	0x61, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x2e, 0x45,
	0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x76,
	0x65, 0x12, 0x34, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x48, 0x00, 0x52,
	0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x1a, 0x1b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x1a, 0x21, 0x0a, 0x07, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x63, 0x72, 0x65, 0x64, 0x49, 0x44, 0x1a, 0x40, 0x0a, 0x06, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x22, 0x64, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x4e, 0x45, 0x57, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d,
	0x49, 0x53, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x10, 0x02, 0x12,
	0x06, 0x0a, 0x02, 0x49, 0x44, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x42, 0x4f, 0x52, 0x5f,
	0x50, 0x55, 0x42, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x49, 0x47,
	0x4e, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x10, 0x06, 0x42,
	0x06, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x36, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0xfe, 0x01, 0x0a, 0x03, 0x43, 0x6d, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x44, 0x49, 0x44, 0x53, 0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x44, 0x49, 0x44, 0x53, 0x65, 0x65,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x55, 0x52, 0x4c, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x41, 0x47, 0x55, 0x49, 0x44, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x41, 0x47, 0x55, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x4a, 0x57, 0x54, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x4a, 0x57, 0x54, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x22,
	0x1f, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x4f, 0x47, 0x49, 0x4e,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x10, 0x01,
	0x22, 0xbd, 0x03, 0x0a, 0x09, 0x43, 0x6d, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6d, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63,
	0x6d, 0x64, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6d,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x63, 0x6d, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x63, 0x6d, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x33, 0x0a, 0x08, 0x73, 0x65, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x73,
	0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x76,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x2e, 0x45, 0x6e, 0x63,
	0x6c, 0x61, 0x76, 0x65, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x12,
	0x34, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x4d, 0x73, 0x67, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x06, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6d, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x4f, 0x4b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48,
	0x00, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x12, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x65, 0x72, 0x72, 0x1a, 0x1c, 0x0a, 0x08, 0x4f, 0x4b, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x4a, 0x57, 0x54, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x4a, 0x57, 0x54, 0x22, 0x2f, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0a, 0x0a, 0x06, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52,
	0x45, 0x41, 0x44, 0x59, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x41,
	0x44, 0x59, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x02, 0x42, 0x06, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x32, 0x7d, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x2f, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x0d, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6d, 0x64, 0x1a, 0x13, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6d, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x30,
	0x01, 0x12, 0x3c, 0x0a, 0x0b, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x12, 0x13, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x4d, 0x73, 0x67, 0x1a, 0x16, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x42,
	0x38, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x69,
	0x6e, 0x64, 0x79, 0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x66, 0x69, 0x6e, 0x64,
	0x79, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x72, 0x70, 0x63,
	0x2f, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_authn_proto_rawDescOnce sync.Once
	file_authn_proto_rawDescData = file_authn_proto_rawDesc
)

func file_authn_proto_rawDescGZIP() []byte {
	file_authn_proto_rawDescOnce.Do(func() {
		file_authn_proto_rawDescData = protoimpl.X.CompressGZIP(file_authn_proto_rawDescData)
	})
	return file_authn_proto_rawDescData
}

var file_authn_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_authn_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_authn_proto_goTypes = []interface{}{
	(SecretMsg_Type)(0),        // 0: authn.v1.SecretMsg.Type
	(Cmd_Type)(0),              // 1: authn.v1.Cmd.Type
	(CmdStatus_Type)(0),        // 2: authn.v1.CmdStatus.Type
	(*SecretMsg)(nil),          // 3: authn.v1.SecretMsg
	(*SecretResult)(nil),       // 4: authn.v1.SecretResult
	(*Cmd)(nil),                // 5: authn.v1.Cmd
	(*CmdStatus)(nil),          // 6: authn.v1.CmdStatus
	(*SecretMsg_Error)(nil),    // 7: authn.v1.SecretMsg.Error
	(*SecretMsg_Enclave)(nil),  // 8: authn.v1.SecretMsg.Enclave
	(*SecretMsg_Handle)(nil),   // 9: authn.v1.SecretMsg.Handle
	(*CmdStatus_OKResult)(nil), // 10: authn.v1.CmdStatus.OKResult
}
var file_authn_proto_depIdxs = []int32{
	0,  // 0: authn.v1.SecretMsg.type:type_name -> authn.v1.SecretMsg.Type
	7,  // 1: authn.v1.SecretMsg.err:type_name -> authn.v1.SecretMsg.Error
	8,  // 2: authn.v1.SecretMsg.enclave:type_name -> authn.v1.SecretMsg.Enclave
	9,  // 3: authn.v1.SecretMsg.handle:type_name -> authn.v1.SecretMsg.Handle
	1,  // 4: authn.v1.Cmd.type:type_name -> authn.v1.Cmd.Type
	2,  // 5: authn.v1.CmdStatus.type:type_name -> authn.v1.CmdStatus.Type
	1,  // 6: authn.v1.CmdStatus.cmd_type:type_name -> authn.v1.Cmd.Type
	0,  // 7: authn.v1.CmdStatus.sec_type:type_name -> authn.v1.SecretMsg.Type
	8,  // 8: authn.v1.CmdStatus.enclave:type_name -> authn.v1.SecretMsg.Enclave
	9,  // 9: authn.v1.CmdStatus.handle:type_name -> authn.v1.SecretMsg.Handle
	10, // 10: authn.v1.CmdStatus.ok:type_name -> authn.v1.CmdStatus.OKResult
	5,  // 11: authn.v1.AuthnService.Enter:input_type -> authn.v1.Cmd
	3,  // 12: authn.v1.AuthnService.EnterSecret:input_type -> authn.v1.SecretMsg
	6,  // 13: authn.v1.AuthnService.Enter:output_type -> authn.v1.CmdStatus
	4,  // 14: authn.v1.AuthnService.EnterSecret:output_type -> authn.v1.SecretResult
	13, // [13:15] is the sub-list for method output_type
	11, // [11:13] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_authn_proto_init() }
func file_authn_proto_init() {
	if File_authn_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_authn_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authn_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authn_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authn_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authn_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretMsg_Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authn_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretMsg_Enclave); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authn_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretMsg_Handle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authn_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdStatus_OKResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_authn_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*SecretMsg_Err)(nil),
		(*SecretMsg_Enclave_)(nil),
		(*SecretMsg_Handle_)(nil),
	}
	file_authn_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*CmdStatus_Enclave)(nil),
		(*CmdStatus_Handle)(nil),
		(*CmdStatus_Ok)(nil),
		(*CmdStatus_Err)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_authn_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_authn_proto_goTypes,
		DependencyIndexes: file_authn_proto_depIdxs,
		EnumInfos:         file_authn_proto_enumTypes,
		MessageInfos:      file_authn_proto_msgTypes,
	}.Build()
	File_authn_proto = out.File
	file_authn_proto_rawDesc = nil
	file_authn_proto_goTypes = nil
	file_authn_proto_depIdxs = nil
}
